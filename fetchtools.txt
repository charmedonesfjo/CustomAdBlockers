####  import file-name=allMultiRouteCFG.rsc
# NOTE :  Always check and ReCHECK parameters.
# ClientType = 0 [OLD w/ existing setup]
:global ClientType 1;
:do { :local devPackage; :local softID; :local devSerial; /do {:set $devPackage [/system package get [/system package find name=routeros] name];} on-error={:set $devPackage "";}; :if ($ClientType!=0) do={/system identity set name="StartingVLANconfiguration";} 
:do {/system logging disable 0; / console clear-history; :set $softID [/system license get software-id];} on-error={:set $softID "UNKNOWN-ID";} ; :do {:set $devSerial [/system routerboard get serial-number];} on-error={:set $devSerial "UNKNOWN-SN";}
# REPLACE NEW or OLD = FOR DEVICE W/ EXISTING CONFIGURATIONS sample--->[ :local SETUPMODE "OLD" ; ]   
:local SETUPMODE "NEW";
:local ownername "Argie Sahulan  (Jbacz)"; 
##>>REPLACE tokenID | CharID  actual value.
:local teleTokenId "2021159313:AAHEBoOLogYjLCpSwVeKPVmKKO4TIxa02vQ"; :local teleChatId "-928606285";
###:set $teleTokenId "6382996148:AAHfcqHSFr3YL4Zc-7a0oxXtskhroScQOp4"; :set $teleChatId "6396465699";
###  8192K/5120K 8192K/8192K 6144K/4096K 14/22 8 4096K/3079K
###  3072K/2048K 4096K/2560K 2250K/1535K 11/16 8 1500K/1024K
:local 1FiProfile "default";
####>>ScriptExecution Routine 0=DISABLE #DefConName: hsOneScpt
:local MTname "1FihsPPPoE";
:local MTowner "OEMUser";
####>>Special ScriptExecution for particular OWNERS 
#:set $MTowner "lau";
#:set $MTowner "BAMT";
:local exeBridge 1;
:local RunOnce 1;
:local ApplyCMD 1;
:local DotOne ".1";
####>>> Create and Change VLANVENDO password
:local changePWAPI 1;
:if ($ClientType=0) do={:set $MTname [/system identity get name];}
####--------Script Variables---------####
####>>> totalVlans = how many vlans
:local totalVlans 25;
####>>> totalPorts = number of MT ports w/ VLAN ID for RJ45
:local totalPorts 4;
####>>>MT port e.g 2 VLAN tagged will start at ether2
:local eportnumstart 3;
# <<SFP>> # # <<SFP>> # # <<SFP>> # # <<SFP>> #
####>>> totalPorts = number of MT ports w/ VLAN ID  for SFP
:local totalPortsSFP 0;
####>>>MT port e.g 2 VLAN tagged will start at SFP port number
:local eportnumstartSFP 0;
:local vlanID "31";
:local PPPvlanID "119";
:local CSIPvlanID "120";
#:local vlanID "2151";
:local HSprofile "default_one_ip";
:local HSfolderLocation "flash/hotspot";
####>>>Admin Routine Variables 0=DISABLE [0 & 1 only]
:local AddSFPports 0;
:local AddUTPports 1;
:local AddBridgeVlan 1;
:local AddhsIP 1;
:local AddDHCP 1;
:local AddHS 1;
:local AddcsNetWatch 0;
:local AddFWNat 1;
:local AddFWNatMask 1;
:local AddFWFilter 1;
:local AddHSWall 1;
:local AddPPPoE 0;
:local AddCSNoHS 0;
:local AddAutoMTBackup 0;
:local AddHSProScript 0;
:local AddPerVendoSales 1;
:local ApplyHSPatch 0;
#add Local
:local AddLanIP 0;
#add VLAN for PPPoE and CS-lan-NO-HS
:local AddVlanCSPPPoE 0;
####>>>-------Admin Script Variables----------<<<####
#InterfaceDefaultName variable FOR RJ45(copper) ports "ether" [IP ADD 10.208.21.X]
:local InterfaceDefaultName "ether";
#InterfaceDefaultName variable FOR SFP(fibre) ports "sfp-sfpplus" or "sfp" [IP ADD 10.208.21.X] sfp-sfpplus1
:local InterfaceDefaultNameSFP "sfp-sfpplus";
#:local InterfaceDefaultNameSFP "sfp";
:local ispx "ether1";
:local hsIPadd "10.164.";
:local hsvidIP "31";
:local vidPrefix "e0";
:local vidPrefixSFP "s0";
:local eVIDName  "-tag-";
:local BridgeName "br0-hs-1fi-";
#:local BridgeName "br0-hs-vid-";
#:local BridgeName "b0HSoltxpon-v";
#:local BridgeName "br0-wifive-vid-";
#:local BridgeName "bridge-hs-v";
#:local BridgeName "brSFP-hs-vid-";
#
#AddOns Traffic Shaper
:local AddDataQue 0;
#PPPoE Variables
:local IPAddppp "10.59.64"
:local IPAddpppSubnet
:local vidPPPoE "$PPPvlanID";
:local namePPPoE "br0-ppp-v"; 
:local ppoeport "$namePPPoE$vidPPPoE";
:local iList "PPPoE";
#Coinslot IP in different IP Segment Non-Hotspot Area
:local CSLanBaseIP "192.168.21."
:local vidCSLanBased "$CSIPvlanID";
:local CSLanBridgeName "br0-csip-v$vidCSLanBased";
#AddOns AutoMTBackup
:local schedName "DailySysBackup";
:local schedInterval "1m";
:local BackupFileLocation "pub/";
#<<DONT EDIT BEYOND THIS LINE>><<DONT EDIT BEYOND THIS LINE>><<DONT EDIT BEYOND THIS LINE>>#
:if ($MTowner="BAMT") do={
#BAM ID 
##:set $teleTokenId "2021159313:AAHEBoOLogYjLCpSwVeKPVmKKO4TIxa02vQ"; :set $teleChatId "-906677504";
:set $teleTokenId "2021159313:AAHEBoOLogYjLCpSwVeKPVmKKO4TIxa02vQ"; :set $teleChatId "-905045000";    
}
:put "Preparing Configuration for ---==>>> $ownername   Info: $MTowner";
:local vidIPcount [:put ([:tonum $hsvidIP]+[:tonum $vlanID])];
:if ($vidIPcount<254) do={:set $hsvidIP $vlanID;}
#:if (($totalVlans+$vlanID)>254) do={:set $hsvidIP $vlanID;}
:set $totalVlans [($totalVlans-1)];
:local vlanStart $vlanID;
:local vlanEND [($vlanID+$totalVlans)];
:local eportnumend [($eportnumstart+$totalPorts-1)];
:local eportnumendSFP [($eportnumstartSFP+$totalPortsSFP-1)];
:local dummy "_DONTDeleteEnableThisITEM";
:local v7cmd; :local cmdShell; :if ($devPackage="routeros") do={ :set $v7cmd "/ip hotspot profile set [find name=$HSprofile] install-hotspot-queue=no; /ipv6 settings set accept-redirects=no accept-router-advertisements=no disable-ipv6=yes "; :set $cmdShell [:put "$v7cmd"]; :set $v7cmd [:parse ":do {$cmdShell} on-error={ }"]; };
:if ($ApplyCMD!=0) do={ :if ($RunOnce!=0) do={/ file remove [find name=allMultiRouteCFG.rsc]; / file remove [find name=flash/allMultiRouteCFG.rsc]; / file remove [find name=skins/allMultiRouteCFG.rsc]; / file remove [find name=pub/allMultiRouteCFG.rsc]; / file remove [find name=flash/skins/allMultiRouteCFG.rsc]; / file remove [find name=flash/pub/allMultiRouteCFG.rsc];
:if ($AddPPPoE=0) do={:do {/interface bridge add comment="$softID JuanFiInitSetupNETWORK" name="$ppoeport"; /ip address add address=10.0.10.1/32 interface="$ppoeport" network=10.0.10.1 comment="$softID JuanFiInitSetupNETWORK";} on-error={} };
:do {/ip hotspot profile add name="$HSprofile" html-directory="$HSfolderLocation" login-by=cookie,http-chap,http-pap hotspot-address=10.0.0.1; } on-error={/ip hotspot profile set [find name="$HSprofile"] login-by=cookie,http-chap,http-pap html-directory="$HSfolderLocation" hotspot-address=10.0.0.1; };    
:do {/interface list add name=WAN comment="$softID DefGrp by:fjo";} on-error={/interface list set [find name=WAN] comment="$softID DefGrp by:fjo";}; :if ($devPackage="routeros") do={$v7cmd;} ; :do {/queue type add kind=sfq name=QPPPqos sfq-allot=2048 sfq-perturb=3} on-error={ }; :do {/queue type add kind=sfq name=QHSqos sfq-allot=1642 sfq-perturb=3} on-error={ };
:do {/interface list add exclude=WAN name=LAN comment="$softID DefGrp by:fjo";} on-error={/interface list set [find name=LAN] exclude=WAN comment="$softID DefGrp by:fjo";};
:do {/interface list add exclude=WAN name=HS comment="$softID DefGrp by:fjo";} on-error={/interface list set [find name=HS] exclude=WAN comment="$softID DefGrp by:fjo";};
:do {/interface list add name=SYSINFO comment="OwnerInfo: $ownername \r\n Date: $[/system clock get date] \r\n Time: $[/system clock get time] \r\n $softID by:fjo";} on-error={/interface list set [find name=SYSINFO] comment="OwnerInfo: $ownername \r\n Date: $[/system clock get date] \r\n Time: $[/system clock get time] \r\n $softID by:fjo";};
:do {/user group add name=API_PISONET comment="$softID DefGrp by:fjo" policy="!reboot,read,test,api,!local,!telnet,!ssh,!ftp,!write,!policy,!winbox,!password,!web,!sniff,!sensitive"} on-error={/user group set [find name=API_PISONET] comment="$softID DefGrp by:fjo"};
:do {/user group add name=API_VENDO_RW comment="$softID DefGrp by:fjo" policy="local,reboot,read,write,test,api,!telnet,!ssh,!ftp,!policy,!winbox,!password,!web,!sniff,!sensitive"} on-error={/user group set [find name=API_VENDO_RW] comment="$softID DefGrp by:fjo"};
:do {/user group add name=RWUser comment="$devSerial DefGrp by:fjo" policy="reboot,read,write,test,winbox,web,api,!local,!telnet,!ssh,!ftp,!policy,!password,!sensitive"; } on-error={/user group set  [find name=RWUser] comment="$devSerial DefGrp by:fjo" policy="reboot,read,write,test,winbox,web,api,!local,!telnet,!ssh,!ftp,!policy,!password,!sensitive"; };
:do {/user add comment="$softID NEED for Initial JuanFi Setup abc123" group=API_PISONET name=pisonet password="abc123"} on-error={:if ($ClientType!=0) do={/user set [find name=pisonet] comment="$softID NEED for Initial JuanFi Setup abc123" group=API_PISONET password="abc123"} }; 
:if ($changePWAPI!=0) do={:do {/user add comment="$softID USE FOR API Coinslot code: $softID" group=API_VENDO_RW name=vlanvendo password="$softID"} on-error={:if ($ClientType!=0) do={/user set [find name=vlanvendo] comment="$softID USE FOR API Coinslot CODE: $softID" group=API_VENDO_RW password="$softID"}};}
:if ($MTowner="lau") do={ :if ($ClientType!=0) do={ :do {/user add comment="$softID Device Config for $MTowner" group=full name=$MTowner pa="rizaldo12345"; /user set [find name=vlanvendo] comment="$softID Device Config for $MTowner" group=API_VENDO_RW pa="rizaldo12345";}  on-error={ } } }
:do {/interface bridge add name="$softID$dummy" disa=yes comment="$softID DummyBridge $dummy"} on-error={}; :do {/ip dhcp-server alert add disabled=yes interface="$softID$dummy" on-alert="This Configuration is for \r\n OwnerInfo: $ownername \r\n Date: $[/system clock get date] \r\n Time: $[/system clock get time] \r\n $softID by:fjo" comment="OwnerInfo: $ownername \r\n Date: $[/system clock get date] \r\n Time: $[/system clock get time] \r\n $softID by:fjo";} on-error={ }; }
:local InterfacePortName;
:local VlanPortName;
:local VlanPortNameId;
:local BridgeNameId;
:local hsIP;
:local InterfacePortNameSFP;
:local VlanPortNameSFP;
:local VlanPortNameIdSFP;
:local BridgeNameIdSFP;
#AddBridge
:if ($ClientType!=0) do={}
:if ($exeBridge!=0) do={:local hsIPctr $hsvidIP; :for b from=[:tonum $vlanStart] to=[:tonum $vlanEND] do={    
    :set $BridgeNameId "$BridgeName$b";
    :set $hsIP "$hsIPadd$hsIPctr";
    :if ($AddBridgeVlan!=0) do={ 
     :do {/interface bridge add name="$BridgeNameId" protocol-mode=none comment="$softID BridgeVLAN $b"} on-error={:do {/interface bridge add name="$BridgeNameId" comment="$softID BridgeVLAN $b"} on-error={};};
        :if ($AddhsIP!=0) do={
             :do {/ip address add address="$hsIP.1/24" comment="$softID BridgeVLAN $b" interface="$BridgeNameId"} on-error={};
        }
        :if ($AddDHCP!=0) do={
             :do {/ip pool add comment="$softID IPpool BridgeVLAN $b" name="pool_$BridgeNameId" ranges="$hsIP.12-$hsIP.252"} on-error={};
             :do {/ip dhcp-server network add address="$hsIP.0/24" comment="$softID IPpool BridgeVLAN $b" gateway="$hsIP.1"} on-error={};
             :do {/ip dhcp-server add address-pool="pool_$BridgeNameId" disabled=no interface="$BridgeNameId" lease-time=3m name="$BridgeNameId"} on-error={};            
        }
            :put "Generating Network ---==>>> $BridgeNameId   IP: $hsIP";
            :set $hsIPctr [($hsIPctr+1)];
    } } }
#AddBridge
#AddVLANPorts-UTP
:for p from=[:tonum $eportnumstart] to=[:tonum $eportnumend] do={
:set $VlanPortName "$vidPrefix$p$eVIDName";
    :for v from=[:tonum $vlanStart] to=[:tonum $vlanEND] do={
    :set $BridgeNameId "$BridgeName$v";   
    :set $VlanPortNameId "$VlanPortName$v";
    :set $InterfacePortName [/interface ethernet get [find default-name="$InterfaceDefaultName$p"] name ];
        :if ($AddUTPports!=0) do={
            :do {/interface vlan add interface="$InterfacePortName" name="$VlanPortNameId" vlan-id=$v disa=no comment="$softID PORT $p VLAN $v";} on-error={};
            :do {/interface bridge port add bridge="$BridgeNameId" interface="$VlanPortNameId" trusted=yes comment="$softID br-VLAN ID $v";} on-error={};  
            :put "Configuring Ether Ports Network ---==>>> BR: $BridgeNameId  PORT: $InterfacePortName VLAN: $VlanPortNameId";
        } } 
}
#AddVLANPorts-UTP
#AddVLANPorts-SFP
:if ($AddSFPports!=0) do={
:for p from=[:tonum $eportnumstartSFP] to=[:tonum $eportnumendSFP] do={
:set $VlanPortNameSFP "$vidPrefixSFP$p$eVIDName";
    :for v from=[:tonum $vlanStart] to=[:tonum $vlanEND] do={
    :set $BridgeNameId "$BridgeName$v";   
    :set $VlanPortNameIdSFP "$VlanPortNameSFP$v";
    :set $InterfacePortNameSFP [/interface ethernet get [find default-name="$InterfaceDefaultNameSFP$p"] name ];
        :if ($AddUTPports!=0) do={
            :do {/interface vlan add interface="$InterfacePortNameSFP" name="$VlanPortNameIdSFP" vlan-id=$v disa=no comment="$softID PORT $p VLAN $v";} on-error={};
            :do {/interface bridge port add bridge="$BridgeNameId" interface="$VlanPortNameIdSFP" trusted=yes comment="$softID br-VLAN ID $v";} on-error={};  
            :put "Configuring Fiber Ports Network ---==>>> BR: $BridgeNameId  PORT: $InterfacePortNameSFP VLAN: $VlanPortNameIdSFP";
        } } 
} }
#AddVLANPorts-SFP
#AddHS
:if ($AddHS!=0) do={:local hsIPctr $hsvidIP; :for h from=[:tonum $vlanStart] to=[:tonum $vlanEND] do={
:set $BridgeNameId "$BridgeName$h"; :set $hsIP "$hsIPadd$hsIPctr";
:if ($devPackage!="routeros") do={:do {/queue simple add comment="$softID DONT ENABLE/MOVE/DELETE THIS ITEM" disabled=yes name="hs-<$BridgeName$h>" target="$softID$dummy";} on-error={}; }
:do {/ip hotspot add address-pool="pool_$BridgeNameId" disabled=no interface="$BridgeName$h" name="$BridgeName$h" profile="$HSprofile";} on-error={};
:do {/ip hotspot ip-binding add address="$hsIP.8" to-address="$hsIP.8" type=bypassed comment="$softID CoinslotIP for $h";} on-error={};
:do {/ip hotspot walled-garden add dst-host="$hsIP.8" comment="$softID CoinslotIP for $h";} on-error={};
:do {/ip hotspot walled-garden ip add action=accept comment="$softID CoinslotIP for $h" disabled=no dst-address="$hsIP.8" !dst-address-list !dst-port !protocol !src-address !src-address-list} on-error={};
:do {/ip firewall address-list add address=("$hsIP.8" . "/32")  comment="$softID CoinslotIPList for $h" list=IP_COINSLOTS} on-error={};
:do {/ip firewall address-list add address="$hsIP.0/24"  comment="$softID CoinslotIP for $h" list=IntraNET} on-error={};
:do {/ip firewall address-list add address="$hsIP.0/24"  comment="$softID CoinslotIP Masquerade List" list="IP_HS_VLAN_NETWORK"} on-error={};
:do {/ip address add address="10.0.0.1" comment="$softID HSdotOneIP for $h" interface="$BridgeName$h" network="10.0.0.1";} on-error={};
:do {/interface list member add comment="$softID HSListMember $h" interface="$BridgeName$h" list=HS} on-error={};
:if ($AddcsNetWatch!=0) do={ :do {/tool netwatch add disabled=yes comment="$softID AssignedHSCoinslotIP for $h" down-script=":log error \"VENDO IP \$host is DOWN   \$[/system clock get date] \$[/system clock get time]\"\r\
                    \n" host="$hsIP.8" interval=22s up-script=":log warning \"VENDO IP \$host is UP   \$[/system clock get date] \$[/system clock get time]\"\r\
                    \n" } on-error={}; }
:if ($AddCSNoHS!=0) do={ :do {/tool netwatch add disabled=yes comment="$softID NonHSCoinslotIP for $h" down-script=":log error \"VENDO IP \$host is DOWN   \$[/system clock get date] \$[/system clock get time]\"\r\
                    \n" host="$CSLanBaseIP$hsIPctr" interval=22s up-script=":log warning \"VENDO IP \$host is UP   \$[/system clock get date] \$[/system clock get time]\"\r\
                    \n" } on-error={};
                :do {/ip firewall address-list add address="$CSLanBaseIP$hsIPctr"  comment="$softID NonHSCoinslotIPList for $h" list=IP_COINSLOTS} on-error={};
                :do {/ip hotspot walled-garden add dst-host="$CSLanBaseIP$hsIPctr" comment="$softID NonHSCoinslotIP for $h";} on-error={};
                :do {/ip hotspot walled-garden ip add action=accept comment="$softID NonHSCoinslotIP for $h" disabled=no dst-address="$CSLanBaseIP$hsIPctr" !dst-address-list !dst-port !protocol !src-address !src-address-list} on-error={};
}
:set $hsIPctr [($hsIPctr+1)];
}
:if ($RunOnce!=0) do={:delay 3s; :put "Generating configuration AddOn Setup";
:if ($AddFWNat!=0) do={ :do {/ip firewall nat add action=redirect chain=hs-unauth comment="$softID HOSPOT_443_hs-unauth" dst-port=443 in-interface-list=HS protocol=tcp to-ports=64875; /ip dns set allow-remote-requests=yes servers=1.1.1.1,8.8.4.4,9.9.9.11; /ip firewall nat add action=redirect chain=dstnat dst-port=53 protocol=udp to-ports=53 comment="$softID DNS_Enforcer"; /ip firewall nat add action=redirect chain=dstnat dst-port=53 protocol=tcp to-ports=53 comment="$softID DNS_Enforcer"; /ip firewall nat add action=dst-nat chain=dstnat comment="$softID NTP_SNTP_Enforcer" dst-port=123 protocol=udp src-address-list=IP_COINSLOTS to-addresses=127.0.0.1 to-ports=123 disa=yes;} on-error={ }; }
:if ($AddFWNatMask!=0) do={ :do {/ip firewall nat add action=masquerade chain=srcnat comment="$softID masquerade ALL COINSLOT IP" dst-address-list="IP_COINSLOTS"; /ip firewall nat add action=masquerade chain=srcnat comment="$softID masquerade ALL hotspot VLAN networks" src-address-list="IP_HS_VLAN_NETWORK"; /ip firewall nat add action=masquerade chain=srcnat comment="$softID masquerade ALL COINSLOT IP" src-address-list="IP_COINSLOTS";} on-error={ }; }
:if ($AddFWFilter!=0) do={ :do {/ip firewall filter add action=accept chain=input comment="$softID IP_COINSLOTS" dst-address-list=IP_COINSLOTS place-before=0; /ip firewall filter add action=accept chain=input comment="$softID IP_COINSLOTS" src-address-list=IP_COINSLOTS place-before=0;  /ip firewall filter add action=accept chain=forward comment="$softID IP_COINSLOTS" dst-address-list=IP_COINSLOTS place-before=0; /ip firewall filter add action=accept chain=forward comment="$softID IP_COINSLOTS" src-address-list=IP_COINSLOTS place-before=0; } on-error={ }; } 
:if ($AddHSWall!=0) do={:do { /ip hotspot walled-garden add comment="$softID JuanFiHOST IP" dst-host=10.0.10.1/32; /ip hotspot walled-garden add comment="JuanFiHOST IP" dst-host=10.0.0.1/32; /ip hotspot walled-garden add comment="$softID PublicKnownDNS" dst-host=8.8.8.8; /ip hotspot walled-garden add comment="$softID PublicKnownDNS" dst-host=8.8.4.4; /ip hotspot walled-garden add comment="$softID PublicKnownDNS" dst-host=1.0.0.1; /ip hotspot walled-garden add comment="$softID PublicKnownDNS" dst-host=1.1.1.1; /ip hotspot walled-garden add comment="$softID PublicKnownDNS" dst-host=9.9.9.11;
    /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=8.8.8.8 !dst-address-list dst-port=53 protocol=udp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=8.8.8.8 !dst-address-list dst-port=53 protocol=tcp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=8.8.4.4 !dst-address-list dst-port=53 protocol=udp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=8.8.4.4 !dst-address-list dst-port=53 protocol=tcp !src-address !src-address-list;
    /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=1.0.0.1 !dst-address-list dst-port=53 protocol=udp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=1.0.0.1 !dst-address-list dst-port=53 protocol=udp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=9.9.9.11 !dst-address-list dst-port=53 protocol=udp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=1.0.0.1 !dst-address-list dst-port=53 protocol=tcp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=1.1.1.1 !dst-address-list dst-port=53 protocol=tcp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID PublicKnownDNS" disabled=no dst-address=9.9.9.11 !dst-address-list dst-port=53 protocol=tcp !src-address !src-address-list;
    /ip hotspot walled-garden ip add action=accept comment="$softID IP_COINSLOTS" disabled=no !dst-address dst-address-list=IP_COINSLOTS dst-port=80 protocol=tcp !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID IP_COINSLOTS" disabled=no !dst-address dst-address-list=IP_COINSLOTS !dst-port !protocol !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID JuanFiHOST IP" disabled=no dst-address=10.0.0.1 !dst-address-list !dst-port !protocol !src-address !src-address-list; /ip hotspot walled-garden ip add action=accept comment="$softID JuanFiHOST IP" disabled=no dst-address=10.0.10.1 !dst-address-list !dst-port !protocol !src-address !src-address-list; } on-error={ } }    
    :if ($AddPPPoE!=0) do={ :do { :do {/interface list add exclude=WAN name=PPPoE} on-error={}; /ip pool add name=pool_pppoe_service ranges=(("$IPAddppp") . (".12-") . ("$IPAddppp") . (".250")) 
        :do {/interface bridge add comment="$softID PPPserviceNETWORK" name="$ppoeport"} on-error={}
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" bridge="$ppoeport" change-tcp-mss=yes local-address="$IPAddppp$DotOne" name=pppoe_server remote-address=pool_pppoe_service;
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" interface-list="$iList" change-tcp-mss=yes insert-queue-before=bottom local-address="$IPAddppp$DotOne" name=pppoe_user_template only-one=yes parent-queue=none queue-type=QPPPqos rate-limit=5M/3M remote-address=pool_pppoe_service;
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" interface-list="$iList" change-tcp-mss=yes insert-queue-before=bottom local-address="$IPAddppp$DotOne" name=P03M only-one=yes parent-queue=none queue-type=QPPPqos rate-limit=4M/4M remote-address=pool_pppoe_service;
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" interface-list="$iList" change-tcp-mss=yes insert-queue-before=bottom local-address="$IPAddppp$DotOne" name=P05M only-one=yes parent-queue=none queue-type=QPPPqos rate-limit=6M/6M remote-address=pool_pppoe_service;
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" interface-list="$iList" change-tcp-mss=yes insert-queue-before=bottom local-address="$IPAddppp$DotOne" name=P07M only-one=yes parent-queue=none queue-type=QPPPqos rate-limit=8M/8M remote-address=pool_pppoe_service;
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" interface-list="$iList" change-tcp-mss=yes insert-queue-before=bottom local-address="$IPAddppp$DotOne" name=P10M only-one=yes parent-queue=none queue-type=QPPPqos rate-limit=11M/11M remote-address=pool_pppoe_service;
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" interface-list="$iList" change-tcp-mss=yes insert-queue-before=bottom local-address="$IPAddppp$DotOne" name=P15M only-one=yes parent-queue=none queue-type=QPPPqos rate-limit=16M/16M remote-address=pool_pppoe_service;
    /ppp profile add address-list=IP_PPPoE comment="$softID $iList Profile NETWORK" interface-list="$iList" change-tcp-mss=yes insert-queue-before=bottom local-address="$IPAddppp$DotOne" name=P20M only-one=yes parent-queue=none queue-type=QPPPqos rate-limit=21M/21M remote-address=pool_pppoe_service;
    /interface pppoe-server server add default-profile=pppoe_server disabled=no interface="$ppoeport" max-mru=1504 max-mtu=1504 mrru=1580 one-session-per-host=yes service-name=PPPoE_Service;
    /ip address add address="$IPAddppp$DotOne/24" interface="$ppoeport" comment="$softID defconf"; /ip address add address=10.0.10.1/32 interface="$ppoeport" network=10.0.10.1 comment="$softID defconf";
    /ip dhcp-server network add address=(("$IPAddppp") . (".0/24")) comment="$softID defconf" gateway="$IPAddppp$DotOne" netmask=24; /ip firewall address-list add address=(("$IPAddppp") . (".0/24")) list=IntraNET;
    /ip firewall address-list add address=(("$IPAddppp") . (".0/24")) disabled=yes list=IP_PPPoE; /ip firewall nat add action=masquerade chain=srcnat comment="$softID defconf: masquerade" ipsec-policy=out,none src-address-list=IP_PPPoE;
    /ppp secret add name=pppoe1455 password=1455pppoe profile=P10M service=pppoe comment="VLAN_1455"; } on-error={}; 
        :if ($AddVlanCSPPPoE!=0) do={:if ($vidPPPoE!="0") do={
            :if ($AddUTPports!=0) do={ :for w from=[:tonum $eportnumstart] to=[:tonum $eportnumend] do={
                :set $VlanPortName "$vidPrefix$w$eVIDName";
                :set $VlanPortNameId "$VlanPortName$vidPPPoE";
                :set $InterfacePortName [/interface ethernet get [find default-name="$InterfaceDefaultName$w"] name ];
                :do {/interface vlan add interface="$InterfacePortName" name="$VlanPortNameId" vlan-id=$vidPPPoE disa=no comment="$softID PORT $w CS VLAN $vidPPPoE";} on-error={};
                :do {/interface bridge port add bridge="$ppoeport" interface="$VlanPortNameId" trusted=yes comment="$softID $ppoeport ID $vidPPPoE";} on-error={};  
            } }
            :if ($AddSFPports!=0) do={ :for w from=[:tonum $eportnumstartSFP] to=[:tonum $eportnumendSFP] do={
                :set $VlanPortName "$vidPrefixSFP$w$eVIDName";
                :set $VlanPortNameId "$VlanPortName$vidPPPoE";
                :set $InterfacePortNameSFP [/interface ethernet get [find default-name="$InterfaceDefaultNameSFP$w"] name ];               
                :do {/interface vlan add interface="$InterfacePortNameSFP" name="$VlanPortNameId" vlan-id=$vidPPPoE disa=no comment="$softID PORT $w CS VLAN $vidPPPoE";} on-error={};
                :do {/interface bridge port add bridge="$ppoeport" interface="$VlanPortNameId" trusted=yes comment="$softID $ppoeport ID $vidPPPoE";} on-error={};  
            } } } 
        }    
    }
:if ($AddLanIP!=0) do={ :do { :local BridgeLAN "br-lan-$softID"; :local LanPoolName "-pool";
:do {/interface bridge add name="$BridgeLAN" comment="$softID BridgeLanIPNet";} on-error={ };
:do {/ip pool add name="$BridgeLAN$LanPoolName" ranges=10.126.172.150-10.126.172.254 comment="$softID BridgeLanIPpool";} on-error={ };
:do {/ip dhcp-server add address-pool="$BridgeLAN$LanPoolName" disabled=no interface="$BridgeLAN" lease-time=3m name="$BridgeLAN";} on-error={ };
:do {/ip address add address=10.126.172.126/24 interface="$BridgeLAN" network=10.126.172.0 comment="$softID BridgeLanIPNet";} on-error={ };
:do {/ip dhcp-server network add address=10.126.172.0/24 gateway=10.126.172.126 comment="$softID BridgeLanIPNet";} on-error={ };
:do {/ip firewall address-list add address=10.126.172.0 comment="$softID IP_AdmLAN List" disabled=yes list=IP_AdmLAN;} on-error={ };
:do {/ip firewall nat add action=masquerade chain=srcnat src-address=10.126.172.0/24 comment="$softID MasQrade BridgeLanIPNet";} on-error={ };
} on-error={ };
}
} 
}
#AddHS
}
    :if ($AddCSNoHS!=0) do={:delay 3s; :put "Generating Non-Hotspot CoinslotIP Setup"; :do {/interface bridge add name="$CSLanBridgeName" comment="$softID NoNET IPList"; } on-error={};
        :do {/ip pool add name="$CSLanBridgeName" ranges=("$CSLanBaseIP" . "100-" . "$CSLanBaseIP" . "200") comment="$softID NoNET IPList"; } on-error={};
        :do {/ip dhcp-server add address-pool="$CSLanBridgeName" disabled=no interface="$CSLanBridgeName" lease-time=3m name="$CSLanBridgeName";} on-error={};
        :do {/ip address add address=("$CSLanBaseIP" . "254/24") interface="$CSLanBridgeName" network=("$CSLanBaseIP" . "0") comment="$softID NoNET IPList"; } on-error={};
        :do {/ip dhcp-server network add address=("$CSLanBaseIP" . "0/24") gateway=("$CSLanBaseIP" . "254") comment="$softID NoNET IPList"; } on-error={};
        :do {/ip firewall address-list add address=192.168.209.90-192.168.209.220 list="IP_COINSLOTS_NOHS" comment="$softID NoNET IPList"; } on-error={}; 
        :if ($AddVlanCSPPPoE!=0) do={ :if ($vidCSLanBased!="0") do={
            :if ($AddUTPports!=0) do={ :for w from=[:tonum $eportnumstart] to=[:tonum $eportnumend] do={
                :set $VlanPortName "$vidPrefix$w$eVIDName";
                :set $VlanPortNameId "$VlanPortName$vidCSLanBased";
                :set $InterfacePortName [/interface ethernet get [find default-name="$InterfaceDefaultName$w"] name ];
                :do {/interface vlan add interface="$InterfacePortName" name="$VlanPortNameId" vlan-id=$vidCSLanBased disa=no comment="$softID PORT $w CS VLAN $vidCSLanBased";} on-error={};
                :do {/interface bridge port add bridge="$CSLanBridgeName" interface="$VlanPortNameId" trusted=yes comment="$softID $CSLanBridgeName ID $vidCSLanBased";} on-error={};  
            } }
            :if ($AddSFPports!=0) do={ :for w from=[:tonum $eportnumstartSFP] to=[:tonum $eportnumendSFP] do={
                :set $VlanPortName "$vidPrefixSFP$w$eVIDName";
                :set $VlanPortNameId "$VlanPortName$vidCSLanBased";
                :set $InterfacePortNameSFP [/interface ethernet get [find default-name="$InterfaceDefaultNameSFP$w"] name ];               
                :do {/interface vlan add interface="$InterfacePortNameSFP" name="$VlanPortNameId" vlan-id=$vidCSLanBased disa=no comment="$softID PORT $w CS VLAN $vidCSLanBased";} on-error={};
                :do {/interface bridge port add bridge="$CSLanBridgeName" interface="$VlanPortNameId" trusted=yes comment="$softID $CSLanBridgeName ID $vidCSLanBased";} on-error={};  
            } } 
            }         
        }    
    }
    :if ($AddAutoMTBackup!=0) do={:do { /system scheduler add disa=yes comment=$schedName interval=$schedInterval name=$schedName on-event="#PURPOSE : MT Daily backup [can be used on UPTIME ISSUE during Power Interruption\
    ]\r\
    \n#DATE : 18 Oct 2022\r\
    \n#Created By: fjoCharmedOnes\r\
    \n#BEGIN\r\
    \n{  \r\
    \n#\r\
    \n# REPLACE VALUES ACCORDINGLY\r\
    \n:local FileLocation \"$BackupFileLocation\";\r\
    \n#\r\
    \n### Fixed Variables DONT EDIT BEYOND THIS LINE\r\
    \n#\r\
    \n:local cDate; :local cTime; :local softID; \r\
    \n:do {:local vTime \"\$[/system clock get time]\"; :for i from=0 to=([:len \$vTime] - 1) do={ :local char [:pick \$vTime \$i]; :if (\$char = \":\
    \") do={ :set \$char \"\"; } ; :set \$cTime (\$cTime . \$char); } } on-error={ };\r\
    \n:do {:local vDate \"\$[/system clock get date]\"; :for i from=0 to=([:len \$vDate] - 1) do={ :local char [:pick \$vDate \$i]; :if (\$char = \"/\
    \") do={ :set \$char \"-\";} ; :set \$cDate (\$cDate . \$char) } } on-error={ };\r\
    \n:do {:set \$softID [/system license get software-id];} on-error={:set \$softID \"NoSoftID\";}; :log info \"*************** -- System Backup Star\
    ted \$[/system clock get date] \$[/system clock get time] -- ****************\";\r\
    \n:local FileName \"\$softID_\$cDate\"; :local finalFileName \"\$FileLocation\$FileName\"; :do {:delay 0.5s; /system backup save dont-encrypt=yes \
    name=\"\$finalFileName\"; :delay 0.3s;} on-error={:log error \"BackupError...timelog: \$[/system clock get date] \$[/system clock get time]\" };\r\
    \n:log info \"*************** -- System Backup succesfully DONE... \$[/system clock get date] \$[/system clock get time] -- ****************\"; / \
    console clear-history;\r\
    \n}\r\
    \n#EOF" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon start-date=jan/01/2020 start-time=00:00:00 } on-error={ };}
:if ($AddHSProScript!=0) do={/system script; :delay 5s; :put "Modifying HS Default User Profile";
    :do {/system script add dont-require-permissions=no name=todayincome owner=admin policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon source="0";} on-error={ };
    :do {/system script add dont-require-permissions=no name=monthlyincome owner=admin policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon source="0";} on-error={ };
    :do {/system script add dont-require-permissions=no name=lifetimeincome owner=admin policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon source="0";} on-error={ };
    :do { /ip hotspot user profile set [ find default=yes ] insert-queue-before=first on-login="### Working and Tested Scripts 01July2022\r\
    \n#     last modified 13 Sept 2022\r\
    \n#########################################################################################\r\
    \n# Modified based on Juanfi v4.0-v3.3 ON-Logon Script able to used with 3.2 BIN w/ 3.3 portals\r\
    \n# Revised By: fjoCharmedones\r\
    \n#########################################################################################\r\
    \n# DESCRIPTION: Hotspot Users ON-Login Event to generate a UserTXT Based Validity format\r\
    \n#########################################################################################\r\
    \n### enable telegram notification, change from 0 to 1 if you want to enable telegram\r\
    \n:local enableTelegram 0;\r\
    \n###replace telegram token\r\
    \n:local telegramToken \"5258262502:AAGFlS-UTbaov1iUMJmGF5zohXm3hPRzczQ\";\r\
    \n###replace telegram chat id / group id\r\
    \n:local chatId \"XXXXXXXX\";\r\
    \n### enable Random MAC synchronizer\r\
    \n:local enableRandomMacSyncFix 1;\r\
    \n### hotspot folder for HEX put flash/hotspot for haplite put hotspot only\r\
    \n:local hotspotFolder \"flash/hotspot\";\r\
    \n:local HSuser \$user;\r\
    \n:local HSemail \"bots@juanfi.local\";\r\
    \n:local com [/ip hotspot user get [find name=\$user] comment];\r\
    \n/ip hotspot user set comment=\"\" \$user;\r\
    \n \r\
    \n#BOF\r\
    \n/do {\r\
    \n{\r\
    \n:local botmail \r\
    \n:set \$botmail [/ip hotspot user get [find name=\$HSuser] email];\r\
    \n\r\
    \nif (\"\$botmail\"=\"\$HSemail\") do={\r\
    \n/system logging enable 0\r\
    \n:log warning \"ProcessingReloadValiditySection\"\r\
    \n/system logging disable 0;\r\
    \n\t:local mac \$\"mac-address\";\r\
    \n\t:local macNoCol;\r\
    \n\t:for i from=0 to=([:len \$mac] - 1) do={ \r\
    \n\t  :local char [:pick \$mac \$i]\r\
    \n\t  :if (\$char = \":\") do={\r\
    \n\t\t:set \$char \"\"\r\
    \n\t  }\r\
    \n\t  :set macNoCol (\$macNoCol . \$char)\r\
    \n\t}\r\
    \n\t/file print file=\"\$hotspotFolder/data/\$macNoCol\" where name=\"noname.txt\"; \r\
    \n\t:delay 3s; \r\
    \n\t/file set [find name=\"\$hotspotFolder/data/\$macNoCol.txt\"] contents=\"\";\r\
    \n\t:delay 1s;\t\r\
    \n :local validUntil [/sys scheduler get \$HSuser next-run];\r\
    \n /file set \"\$hotspotFolder/data/\$macNoCol.txt\" contents=\"\$HSuser#\$validUntil\";\r\
    \n \t:delay 1s;\r\
    \n #/ip hotspot user set email=\"wifi@local\"  [find name=\$HSuser];\r\
    \n /system logging enable 0\r\
    \n :log info \"Revised and Modified By: fjoCharmedones\"\r\
    \n}\r\
    \n}\r\
    \n#EOF\r\
    \n\r\
    \n:if (\$com!=\"\") do={\r\
    \n/system logging enable 0\r\
    \n:log warning \"Processing ON-Login event profile validation \\n\\r HotspotInterface: \$interface \\n\\r Username: \$user  \"\r\
    \n/system logging disable 0;\r\
    \n\t:local mac \$\"mac-address\";\r\
    \n\t:local macNoCol;\r\
    \n\t:for i from=0 to=([:len \$mac] - 1) do={ \r\
    \n\t  :local char [:pick \$mac \$i]\r\
    \n\t  :if (\$char = \":\") do={\r\
    \n\t\t:set \$char \"\"\r\
    \n\t  }\r\
    \n\t  :set macNoCol (\$macNoCol . \$char)\r\
    \n\t}\r\
    \n\t\r\
    \n\t:local validity [:pick \$com 0 [:find \$com \",\"]];\r\
    \n\t\r\
    \n\t:if ( \$validity!=\"0m\" ) do={\r\
    \n\t:log warning \"ProcessingOnUserProfile \$user \"\r\
    \n\t/system logging disable 0\r\
    \n\t\t:local sc [/sys scheduler find name=\$user]; :if (\$sc=\"\") do={ :local a [/ip hotspot user get [find name=\$user] limit-uptime]; :local validity [:pick \$com 0 [:find \$com \",\"]]; :local c (\$validity); :local date [ /system clock get date]; /sys sch add name=\"\$user\" disable=no start-date=\$date interval=\$c on-event=\"/ip hotspot user remove [find name=\$user]; /ip hotspot active remove [find user=\$user]; /ip hotspot cookie remove [find user=\$user]; /system sche remove [find name=\$user]; /do { /file remove \\\"\$hotspotFolder/data/\$macNoCol.txt\\\";} on-error={} ;\" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon; :delay 2s; } else={ :local sint [/sys scheduler get \$user interval]; :local validity [:pick \$com  0 [:find \$com \",\"]]; :if ( \$validity!=\"\" ) do={ /sys scheduler set \$user interval (\$sint+\$validity); } };\r\
    \n\t\t#:local sc [/sys scheduler find name=\$user]; :if (\$sc=\"\") do={ :local a [/ip hotspot user get [find name=\$user] limit-uptime]; :local c (\$validity); :local date [ /system clock get date]; /sys sch add name=\"\$user\" disable=no start-date=\$date interval=\$c on-event=\"/ip hotspot user remove [find name=\$user]; /ip hotspot active remove [find user=\$user]; /file remove \\\"\$hotspotFolder/data/\$macNoCol.txt\\\"; /ip hotspot cookie remove [find user=\$user]; /system sche remove [find name=\$user]\" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon; :delay 2s; } else={ :local sint [/sys scheduler get \$user interval]; :if ( \$validity!=\"\" ) do={ /sys scheduler set \$user interval (\$sint+\$validity); } };\r\
    \n\t}\r\
    \n/do {\r\
    \n/system logging enable 0\r\
    \n:log warning \"ProcessingOnValiditySection\"\r\
    \n/system logging disable 0;\r\
    \n:local validUntil [/sys scheduler get \$user next-run];\r\
    \n/file print file=\"\$hotspotFolder/data/\$macNoCol\" where name=\"noname.txt\"; \r\
    \n:delay 3s; \r\
    \n/file set [find name=\"\$hotspotFolder/data/\$macNoCol.txt\"] contents=\"\";\r\
    \n:delay 1s;\r\
    \n/file set \"\$hotspotFolder/data/\$macNoCol.txt\" contents=\"\$user#\$validUntil\";\r\
    \n:delay 1s;\r\
    \n/ip hotspot user set email=\$HSemail  [find name=\$HSuser];\r\
    \n} on-error={/system logging enable 0; \r\
    \n:log error \"ErrorOnValidityScriptSection\"}\r\
    \n\r\
    \n/do {\t\r\
    \n/system logging enable 0\r\
    \n:log warning \"ProcessingOnTelegramScriptSection\"\r\
    \n/system logging disable 0;\r\
    \n:local infoArray [:toarray [:pick \$com ([:find \$com \",\"]+1) [:len \$com]]];\r\
    \n:local mac \$\"mac-address\"; \r\
    \n:local totaltime [/ip hotspot user get \$user limit-uptime]; \r\
    \n:local date [ /system clock get date ]; \r\
    \n:local time [/system clock get time ]; \r\
    \n:local eg [/ip hotspot user get \$user uptime]; \r\
    \n:local rtime (\$totaltime-\$eg); \r\
    \n:local expiry [ /sys sch get [/sys sch find where name=\$user] next-run]; \r\
    \n:local host [/ip dhcp-server lease get [ find mac-address=\$mac ] host-name]; \r\
    \n:local tu [ /ip hotspot user print count-only]; \r\
    \n:local amt [:pick \$infoArray 0];\r\
    \n:local ext [:pick \$infoArray 1];\r\
    \n:local vendo [:pick \$infoArray 2];\r\
    \n:local uactive [/ip hotspot active print count-only];\r\
    \n:local idle ( \$tu - \$uactive ); \r\
    \n\r\
    \n:local getIncome [:put ([/system script get [find name=todayincome] source])];\r\
    \n/system script set source=\"\$getIncome\" todayincome;\r\
    \n\r\
    \n:local getSales (\$amt + \$getIncome);\r\
    \n/system script set source=\"\$getSales\" todayincome;\r\
    \n\r\
    \n:local getMonthlyIncome [:put ([/system script get [find name=monthlyincome] source])];\r\
    \n/system script set source=\"\$getMonthlyIncome\" monthlyincome;\r\
    \n\r\
    \n:local getMonthlySales (\$amt + \$getMonthlyIncome);\r\
    \n/system script set source=\"\$getMonthlySales\" monthlyincome;\r\
    \n\r\
    \n:local getLifetimeIncome [:put ([/system script get [find name=monthlyincome] source])];\r\
    \n/system script set source=\"\$getMonthlyIncome\" lifetimeincome;\r\
    \n\r\
    \n:local getLifetimeSales (\$amt + \$getMonthlyIncome);\r\
    \n/system script set source=\"\$getMonthlySales\" lifetimeincome;\r\
    \n\t\r\
    \n\t:if (\$enableTelegram=1) do={\r\
    \n\t     /system logging enable 0;\r\
    \n\t     :log warning \"SendingTelegramInfoSection\"\r\
    \n\t\t /system logging disable 0;\r\
    \n\t\t:local vendoNew;\r\
    \n\t\t:for i from=0 to=([:len \$vendo] - 1) do={ \r\
    \n\t\t  :local char [:pick \$vendo \$i]\r\
    \n\t\t  :if (\$char = \" \") do={\r\
    \n\t\t\t:set \$char \"%20\"\r\
    \n\t\t  }\r\
    \n\t\t  :set vendoNew (\$vendoNew . \$char)\r\
    \n\t\t}\r\
    \n\t\t/do {\t /tool fetch url=\"https://api.telegram.org/bot\$telegramToken/sendmessage\?chat_id=\$chatId&text=<<======New Sales======>> %0A VENDO: \$vendo %0A%0A VOUCHER: \$user %0A%0A LOGIN:%0A      \$date \$time%0AVALID UNTIL:%0A      \$expiry%0ATOTAL TIME PURCHASED:%0A       \$totaltime%0ATOTALREMAINING TIME:%0A       \$rtime%0ADevice: \$host%0AMAC:   \$mac%0AIP:        \$address%0AAmount:  \$amt%0AExtended: \$ext%0AToday Sales: \$getSales%0AMonthly Sales: \$getMonthlySales %0ALifetime Sales : \$getLifetimeSales%0AActive users: \$uactive  Inactive: \$idle%0A<<====================>>\" keep-result=no; } on-error={/system logging enable 0; :log error \"ErrorOnSendInfoTelegramSection\"}\r\
    \n\t}\r\
    \n} on-error={/system logging enable 0; \r\
    \n:log error \"ErrorOnTelegramScriptSection\"}\r\
    \n\r\
    \n};\r\
    \n\r\
    \n:if (\$enableRandomMacSyncFix=1) do={\r\
    \n/system logging enable 0\r\
    \n:log warning \"ProcessingMACramdomizerScriptSection\"\r\
    \n/system logging disable 0;\r\
    \n\t:local cmac \$\"mac-address\"\r\
    \n\t:foreach AU in=[/ip hotspot active find user=\"\$username\"] do={\r\
    \n\t  :local amac [/ip hotspot active get \$AU mac-address];\r\
    \n\t  :if (\$cmac!=\$amac) do={  /ip hotspot active remove [/ip hotspot active find mac-address=\"\$amac\"]; }\r\
    \n\t}\r\
    \n};\r\
    \n/system logging enable 0\r\
    \n:log warning \"LOGON-EVENT Finished Username: \$user \"\r\
    \n:log info  \"Tested 30March2022 / hAPlite6.49.4 / Juanfi 3.2Wifi / 3.3 Script & Portal\"\r\
    \n} on-error={/system logging enable 0;  :log error \"MainScriptSectionError\"}\r\
    \n#EndOfScript" on-logout="### Revised by: fjoCharmedones | ONLogoutEvent | Tested Working as of 13Jan23K\r\
    \n### onlogout script\r\
    \n### hotspot folder for HEX put flash/hotspot for haplite put hotspot only\r\
    \n{\r\
    \n/system logging enable 0; :log info \"==LOGOUT Event using AccessCode: \$user Details: \$cause \";\r\
    \n/do {\r\
    \n:local hotspotFolder \"flash/hotspot\";\r\
    \n#\r\
    \n:local Limituptime ([/ip hotspot user get \$user limit-uptime]); :local Uptime ([/ip hotspot user get \$user uptime]);\r\
    \n:if ( \$Limituptime = \$Uptime) do={ /system logging disable 0;\r\
    \n/do {/ip hotspot user set \$user email=\"timesup@finish.hotspot.local\" disa=yes;} on-error={/system logging enable 0; :log info \"NORecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/ip hotspot user remove \$user;} on-error={/system logging enable 0; :log info \"NORecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/ip hotspot cookie remove [find user=\$user];} on-error={/system logging enable 0; :log info \"NOCookieRecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/system sche remove \$user;} on-error={/system logging enable 0; :log info \"NOSchedRecordFound: \$user\"; /system logging disable 0;}\r\
    \n:local mac \$\"mac-address\"; :local macNoCol;\r\
    \n:for i from=0 to=([:len \$mac] - 1) do={ \r\
    \n  :local char [:pick \$mac \$i]\r\
    \n  :if (\$char = \":\") do={\r\
    \n\t:set \$char \"\"\r\
    \n  }\r\
    \n  :set macNoCol (\$macNoCol . \$char)\r\
    \n}\r\
    \n/do {/file remove \"\$hotspotFolder/data/\$macNoCol.txt\";} on-error={/system logging enable 0; :log info \"NoTXTvalidityRecordFound: \$user\"; /system logging disable 0;}\r\
    \n} else={/system logging enable 0; :log warning \"==UserLogout....Using...AccessCode: \$user EventDetails: \$cause -TimeStamp: \$[/system clock get date] \$[/system clock get time]\";}\r\
    \n} on-error={/system logging enable 0; :log error \"ERRORonLOGOUTeventScript\";}\r\
    \n/system logging enable 0; :log info \"==LOGOUT==EventFinished==: \$user TimeStamp: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n} \r\
    \n#EOF" parent-queue=none queue-type=QHSqos rate-limit=3M/2M shared-users=2 } on-error={ };
   
        :if ($AddPerVendoSales!=0) do={:delay 0.3s; :put "Processing JuanFi HS Default User Profile with PerVendo SalesInfo"; :global coderep; :local sndev [/system routerboard get serial-number];
 ############################################
            :do { :put "Creating SALES MONITORING"; :delay 5s;
            :local iface; :local iname; :local ims "Monthly"; :local ids "Daily";
                :foreach h in=[/ip hotspot find where !(disabled)] do={ :set $iface [/ip hotspot get $h interface]; :set $iname [/ip hotspot get $h name];
                 :put "$iface $iname";
                 :if ("$teleChatId"="" and "$teleTokenId"="") do={:set $teleChatId "Replace with your TelegramChatID"; :set $teleTokenId "Replace with your TelegramTokenID"; }
                  :do {/tool traffic-monitor add disa=yes on-event="0" comment="$teleChatId" interface=$iface name="$iname_$ims"} on-error={ };
                  :do {/tool traffic-monitor add disa=yes on-event="0" traffic=received trigger=below comment="$teleTokenId" interface=$iface name="$iname_$ids"} on-error={ }; }; 
            } on-error={ };
            :do { :put "\n\nThis Procedure may take a while it depends on size of Hotspot Users Database\n\n"; :delay 0.5s;
                    :if ($SETUPMODE="OLD") do={ { :put "Checking and Migrating OLD USERS Account"; :delay 1.5s;   
                        :do {/ip hotspot user profile remove [find name=zOneDefConPro];} on-error={ };
                        :do {/ip hotspot user profile add copy-from="$1FiProfile" name=zOneDefConPro;} on-error={ };
                        :set $sndev [/system routerboard get serial-number];
                            { :local newbox "$sndev@sn.mynetname.net"; :local hsname; :local hsComment; :local comlen; :local LimitUpTime;
                                :foreach mailbox in=("new@gmail.com","extend@gmail.com","bots@juanfi.local") do={
                                :foreach i in=([/ip hotspot user find where email=($mailbox)]) do={
                                    :set $hsname [/ip hotspot user get $i name]; :set $hsComment [/ip hotspot user get $i comment]; :set $comlen [:len $hsComment]; :set $LimitUpTime [/ip hotspot user get $i limit-uptime];
                                        :if ($hsname!="default-trial" and $comlen=0) do={
                                        :if ($mailbox = "new@gmail.com") do={:local cmd ("ip hotspot user set " . $i . "  email=$newbox") ;
                                            :execute $cmd }
                                        :if ($mailbox = "extend@gmail.com") do={:local cmd ("ip hotspot user set " . $i . "  email=$newbox") ;
                                            :execute $cmd }
                                        :if ($mailbox = "bots@juanfi.local") do={:local cmd ("ip hotspot user set " . $i . "  email=$newbox") ;
                                            :execute $cmd }
                                        }
                                        :if ($hsname!="default-trial" and $mailbox="bots@juanfi.local") do={ 
                                           :if ([:len $LimitUpTime]!=0) do={/ip hotspot user set $i email=$newbox;}
                                        }
                            } } }
                    :put "Migration USERS Account DONE"; } };                
            } on-error={ };
:do { {:put "SYSTEM SCRIPT AND SCHEDULERS"; :delay 5s;
{:put "Preparing ONEBootUpdate sales monitoring"; :delay 1.5s;
    /system scheduler add comment="$sndev" disabled=yes interval=1d name=zONEBootUpdate on-event="# REQUIRED    : MTrOSver 6.48 & UP | JuanFi 4.x BIN & Portal\r\
    \n# DESCRIPTION : Daily Routine Module for JuanFi Hotspot User Profile Login/Logout script Event \r\
    \n# Created By: fjoCharmedones \r\
    \n# Date Created : 15 June 2023\r\
    \n:do {:local dateint do={:local montharray ( \"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\" ); :local days [ :pick \$d 4 6 ];:local month [ :pick \$d 0 3 ];:local year [ :pick \$d 7 11 ];\r\
    \n:local monthint ([ :find \$montharray \$month]); :local month (\$monthint + 1); :if ( [:len \$month] = 1) do={:local zero (\"0\");:return [:tonum (\"\$year\$zero\$month\$days\")];} else={:return [:tonum (\"\$year\$month\$days\")];}};\r\
    \n:local timeint do={:local hours [ :pick \$t 0 2 ];:local minutes [ :pick \$t 3 5 ];:return (\$hours * 60 + \$minutes) ;};\r\
    \n:local date [ /system clock get date ]; :local time [ /system clock get time ]; :local today [\$dateint d=\$date] ; :local curtime [\$timeint t=\$time] ; :local tyear [ :pick \$date 7 11 ]; :local lyear (\$tyear-1);\r\
    \n:local tmpM [ :pick \$today 4 6]; :local tmpD [ :pick \$today 6 8]; :set \$coderep \"in-\$tmpM-\$tmpD\"; } on-error={:set \$coderep \"ZZ-\$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:do {:global devSN [/system sched get [find name=zONEBootime] comment];} on-error={:do {:global devSN [/system sched get [find name=zONEBootUpdate] comment];} on-error={ };};\r\
    \n:do {:global devFWtype [/system routerboard get firmware-type]; :global devSerial [/system routerboard get serial-number]; :global devModel [/system routerboard get model]; :global HSemailadd \"\$devSerial@sn.mynetname.net\"; } on-error={ }; \r\
    \n#EOF" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon start-date=jan/01/2022 start-time=00:00:01 }
{ :put "Preparing ONESystemBoot device BootUp enviroment"; :delay 1.5s;
    /system scheduler add comment="$sndev" name=zONEBootime on-event="# REQUIRED    : MTrOSver 6.48 & UP | JuanFi 4.x BIN & Portal\r\
    \n# DESCRIPTION : StartUP for JuanFi Hotspot User Profile Login/Logout script Event \r\
    \n# Created By: fjoCharmedones \r\
    \n# Date Created : 15 June 2023\r\
    \n:delay 10s; :log info \"Automated System StartUP\"; :log warning \"== Initializing Device Parameters....== - \$[/system clock get date] \$[/system clock get time]\"; /system logging disable 0;\r\
    \n{\r\
    \n/interface ethernet \r\
    \n:foreach iface in=[/interface ethernet find] do={ /interface ethernet reset-mac-address \$iface }\r\
    \n:global devPackage; /do {:set \$devPackage [/system package get [/system package find name=routeros] name];} on-error={:set \$devPackage \"\";};\r\
    \n:local cmdShell; :local ntpCMD; :local devSerial [/system routerboard get serial-number]; :local devModel [/system routerboard get model]; :local devLic [/system license get software-id];\r\
    \n/tool romon set enabled=yes; /ip cloud set ddns-enabled=yes ddns-update-interval=1m;\r\
    \n:local ntpVI \"/system ntp client set enabled=yes  primary-ntp=202.12.97.45 secondary-ntp=216.239.35.12;\";\r\
    \n:local ntpVII \"/system ntp client set enabled=yes mode=unicast servers=time.windows.com,time.google.com,time.apple.com,asia.pool.ntp.org; /system ntp server set enabled=yes manycast=yes multicast=yes;\";\r\
    \n:if (\$devPackage=\"routeros\") do={:set \$cmdShell [:put \"\$ntpVII\"]; :set \$ntpCMD [:parse \":do {\$cmdShell} on-error={ }\"]; } else={:set \$cmdShell [:put \"\$ntpVI\"]; :set \$ntpCMD [:parse \":do {\$cmdShell} on-error={ }\"]; };\r\
    \n:do {\$ntpCMD} on-error={/ system logging enable 0; :log error \"NTPscriptExecutionError\"}; :delay 1.5s; \r\
    \n{ :global devFWtype [/system routerboard get firmware-type]; :global devSerial [/system routerboard get serial-number]; :global devModel [/system routerboard get model]; :global coderep; :global HSemailadd \"\$devSerial@sn.mynetname.net\";    \r\
    \n:log error \"== This Configuration is custom made for JuanFi System w/ Sales Monitoring Report == \";\r\
    \n:do { :do {:local dateint do={:local montharray ( \"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\" ); :local days [ :pick \$d 4 6 ];:local month [ :pick \$d 0 3 ];:local year [ :pick \$d 7 11 ];\r\
    \n:local monthint ([ :find \$montharray \$month]); :local month (\$monthint + 1); :if ( [:len \$month] = 1) do={:local zero (\"0\");:return [:tonum (\"\$year\$zero\$month\$days\")];} else={:return [:tonum (\"\$year\$month\$days\")];}};\r\
    \n:local timeint do={:local hours [ :pick \$t 0 2 ];:local minutes [ :pick \$t 3 5 ];:return (\$hours * 60 + \$minutes) ;};\r\
    \n:local date [ /system clock get date ]; :local time [ /system clock get time ]; :local today [\$dateint d=\$date] ; :local curtime [\$timeint t=\$time] ; :local tyear [ :pick \$date 7 11 ]; :local lyear (\$tyear-1);\r\
    \n:local tmpM [ :pick \$today 4 6]; :local tmpD [ :pick \$today 6 8]; :set \$coderep \"in-\$tmpM-\$tmpD\"; } on-error={:set \$coderep \"ZZ-\$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:do {:global devSN [/system sched get [find name=zONEBootime] comment];} on-error={:do {:global devSN [/system sched get [find name=zONEBootUpdate] comment];} on-error={ };};\r\
    \n} on-error={/system logging enable 0; :log error \"==BootAutomationError== - \$[/system clock get date] \$[/system clock get time]\";}; } \r\
    \n/console clear-history;\r\
    \n}\r\
    \n/ system logging enable 0; :log error \"== This Configuration is made for \$[/system identity get name] == \"; :log warning \"== BootUP Automation Process Completed == - \$[/system clock get date] \$[/system clock get time]  - Created by: fjoCharmedOnes\"; / console clear-history;\r\
    \n#EOF" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon start-time=startup }
{ :put "Preparing ONEBootSales & Maintenance checker"; :delay 1.5s;
    /system scheduler add comment="$sndev" interval=1d name=zONEBootResetSales on-event="# REQUIRED    : MTrOSver 6.48 & UP | JuanFi 4.x BIN & Portal\r\
    \n# DESCRIPTION : Daily Routine Module for JuanFi Hotspot User Profile Login/Logout script Event \r\
    \n# Created By: fjoCharmedones \r\
    \n# Date Created : 15 June 2023\r\
    \n:log info \"Daily Routine Module for JuanFiSystem =->: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n:do { :do {:local dateint do={:local montharray ( \"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\" ); :local days [ :pick \$d 4 6 ];:local month [ :pick \$d 0 3 ];:local year [ :pick \$d 7 11 ];\r\
    \n:local monthint ([ :find \$montharray \$month]); :local month (\$monthint + 1); :if ( [:len \$month] = 1) do={:local zero (\"0\");:return [:tonum (\"\$year\$zero\$month\$days\")];} else={:return [:tonum (\"\$year\$month\$days\")];}};\r\
    \n:local timeint do={:local hours [ :pick \$t 0 2 ];:local minutes [ :pick \$t 3 5 ];:return (\$hours * 60 + \$minutes) ;};\r\
    \n:local date [ /system clock get date ]; :local time [ /system clock get time ]; :local today [\$dateint d=\$date] ; :local curtime [\$timeint t=\$time] ; :local tyear [ :pick \$date 7 11 ]; :local lyear (\$tyear-1);\r\
    \n:local tmpM [ :pick \$today 4 6]; :local tmpD [ :pick \$today 6 8]; :set \$coderep \"in-\$tmpM-\$tmpD\"; } on-error={:set \$coderep \"ZZ-\$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:do {:global devSN [/system sched get [find name=zONEBootime] comment];} on-error={:do {:global devSN [/system sched get [find name=zONEBootResetSales] comment];} on-error={ };};\r\
    \n:do {:global devFWtype [/system routerboard get firmware-type]; :global devSerial [/system routerboard get serial-number]; :global devModel [/system routerboard get model]; :global HSemailadd \"\$devSerial@sn.mynetname.net\"; } on-error={ }; } on-error={ };\r\
    \n{:log info \"Reset Daily Sales  started: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n:do {/system logging disable 0; /system script set source=\"0\" [/system script find name=todayincome]; /tool traffic-monitor set on-event=\"0\" [/tool traffic-monitor find traffic=received]; /system logging enable 0;} on-error={/system logging enable 0; :log error \"ERROR on Daily Sales Routine  timelog: \$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:log info \"Reset Daily Sales  Done: \$[/system clock get date] \$[/system clock get time]\";    \r\
    \nif ([:pick [/system clock get date] 4 6]=\"01\") do={:log info \"Monthly Daily Sales  started: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n:do {/system logging disable 0; /system script set source=\"0\" [/system script find name=monthlyincome]; /tool traffic-monitor set on-event=\"0\" [/tool traffic-monitor find trigger=below]; /system logging enable 0;} on-error={/system logging enable 0; :log error \"ERROR on Monthly Sales Routine  timelog: \$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:log info \"Monthly Daily Sales  Done: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n} }\r\
    \n#EOF" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon start-date=dec/31/2020 start-time=00:00:01 }    
:put "Done Processing SYSTEM SCRIPT AND SCHEDULERS"; } } on-error={ };
:do { :put "Preparing JuanFi HOTSPOT login/logout event script"; :delay 5s; :local TokenId "$teleTokenId"; :local ChatId "$teleChatId";
:do {/ip hotspot user profile set [ find default=yes ] insert-queue-before=first on-login=":put (\",ntfc,10,31d,12,,Disable,\")\r\
    \n# REQUIRED    : MTrOSver 6.48 & UP | JuanFi 4.x BIN & Portal\r\
    \n# DESCRIPTION : JuanFi Hotspot User Profile Login/Logout script Event \r\
    \n#               Sales Monitoring using Mikhmon | Individual Vendo Sales & Telegram Info\r\
    \n# Created By: fjoCharmedones \r\
    \n# Date Created : 15 June 2023\r\
    \n###--->>BOF\r\
    \n:if (\$devSN=\$devSerial) do={ /system logging disable 0; / console clear-history;\r\
    \n### Replace telegram token id | chat id / group id\r\
    \n:local telegramTokenId \"$TokenId\";\r\
    \n:local telegramChatId \"$ChatId\";\r\
    \n##\r\
    \n# declared VARIABLES = 0 or 1, change to 0=DISABLE 1=ENABLE\r\
    \n##\r\
    \n# Send Telegram Message\r\
    \n:local TelegramSendMsg 1;\r\
    \n# Telegram Message Per Vendo w/ Separates telegram token id | chat id / group id [w/ special instruction]\r\
    \n:local PerVendoTelegram 1;\r\
    \n# Add Sales Monitoring using Mikhmon Server\r\
    \n:local enableAddSalesReport 1;\r\
    \n# for ROSv7.x Does you Portal support REST-API \? ROS v6.x AUTO-DISABLE\r\
    \n:local hsRestAPI 0;\r\
    \n# folder name for validity TEXTFILE [NOTE: AUTO-DETECT FOLDER LOCATION no NEED to specify]\r\
    \n:local hsDataName \"/data/\";\r\
    \n##### Working Variables DONT EDIT BEYOND THIS LINE#\r\
    \n:local validityTextFolder; :local validityTextFile; :local vcMacAdd; :local CoinsAmt; :local hsSchedevent;\r\
    \n:local infoArray; :local LoginInfo; :local validUntil; :local validity; :local validtill; :local validValue; :local validLimitUptime;\r\
    \n:local cpa 0; :local comDetails \"fjo\"; :local extfile \".txt\"; :local hsMacAdd \$\"mac-address\"; :local hsIfaceName \$interface; :local hsUser \$user;\r\
    \n:local sobre [/ip hotspot user get \$user email]; :local hsLimitUptime [/ip hotspot user get \$user limit-uptime]; \r\
    \n:local hsUptime [/ip hotspot user get \$user uptime]; :local hsComment [/ip hotspot user get \$user comment];\r\
    \n:local hsProfile [/ip hotspot user get \$user profile]; :local hsHSprofile [/ip hotspot get [/ip hotspot find interface=\$hsIfaceName] profile];\r\
    \n:local hsSharedUser [/ip hotspot user profile get [/ip hotspot user profile find name=\$hsProfile] shared-users];\r\
    \n:local hsHTMLdir [/ip hotspot profile get [ /ip hotspot profile find name=\$hsHSprofile] html-directory];\r\
    \n:set \$validityTextFolder \"\$hsHTMLdir\$hsDataName\";\r\
    \n:set \$infoArray [:toarray [:pick \$hsComment ([:find \$hsComment \",\"]+1) [:len \$hsComment]]];\r\
    \n:set \$CoinsAmt [:pick \$infoArray 0]; :set \$validity [:pick \$hsComment 0 [:find \$hsComment \",\"]]; :set \$validLimitUptime [:len [/ip hotspot user get \$user limit-uptime]];\r\
    \n:if (\$sobre=\"new@gmail.com\" or \$sobre=\"extend@gmail.com\" or \$sobre=\"bots@juanfi.local\") do={/ip hotspot user set email=\"\$HSemailadd\" comment=\"\" \$user;}\r\
    \n:if (\$devPackage!=\"routeros\") do={:set \$hsRestAPI 0;}\r\
    \n:do {/system logging enable 0; :log info \"Checking ON-Login event profile \\n\\r Hotspot: \$interface \\n\\r Username: \$user \"; /system logging disable 0; \r\
    \n:if (\$hsRestAPI=0) do={/system logging enable 0; :log warning \"WorkingOnValidityTextFile\"; /system logging disable 0;\r\
    \n:for i from=0 to=([:len \$hsMacAdd] - 1) do={ :local char [:pick \$hsMacAdd \$i]; :if (\$char = \":\") do={ :set \$char \"\"; } ; :set vcMacAdd (\$vcMacAdd . \$char); } ;\r\
    \n:set \$validityTextFile \"\$validityTextFolder\$vcMacAdd\";\r\
    \n/file print file=\$validityTextFile where name=\"NoName.TXT\"; \r\
    \n:delay 3s;\r\
    \n:do {/file set \"\$validityTextFile\$extfile\" contents=\" \";} on-error={/file set [find name=\$validityTextFile\$extfile] contents=\" \";}; :delay 1.5s;\r\
    \n:do {/file set [find name=\$validityTextFile\$extfile] contents=\" \";} on-error={:do {/file set \"\$validityTextFile\$extfile\" contents=\" \";} on-error={ };}; :delay 1.5s;\r\
    \nif (\"\$sobre\"=\"\$HSemailadd\" or \"\$sobre\"=\"bots@juanfi.local\") do={ /system logging enable 0; :log warning \"ProcessUser re-login routine \\n\\r HotspotInterface: \$interface \\n\\r Username: \$user\"; /system logging disable 0; \r\
    \n:do {:set \$validUntil [/sys scheduler get \$hsUser next-run]; /file set \"\$validityTextFile\$extfile\" contents=\"\$hsUser#\$validUntil\";} on-error={ }; :delay 1.5s;}\r\
    \n:delay 0.5s; } ;\r\
    \n:if (\$hsSharedUser>=2) do={/system logging enable 0; :log warning \"Check-Remove-MultipleActiveUserLogins\"; /system logging disable 0; :local cSUmac \$\"mac-address\";\r\
    \n\t:foreach m in=[/ip hotspot active find user=\"\$username\"] do={ :local aSUmac [/ip hotspot active get \$m mac-address]; :if (\$cSUmac!=\$aSUmac) do={  /ip hotspot active remove [/ip hotspot active find mac-address=\"\$aSUmac\"]; } } };\r\
    \n:if (\$sobre=\"new@gmail.com\" or \$sobre=\"extend@gmail.com\") do={ :if (\$sobre=\"new@gmail.com\") do={:set \$LoginInfo \"<<======New User======>>\"}; :if (\$sobre=\"extend@gmail.com\") do={:set \$LoginInfo \"<<======User ExtendTime======>>\"};\r\
    \n/system logging enable 0; :log warning \"Processing \$LoginInfo User Login Info \\nHotspotServer: \$interface Username:<< \$user >>  Amount:--=>  \$CoinsAmt <=--\"; /system logging disable 0;\r\
    \n:set \$hsSchedevent [:put (\":do {/system sche remove [find name=\$user];} on-error={ }; :do {/ip hotspot user remove [find name=\$user];} on-error={ }; :do {/ip hotspot active remove [find user=\$user];} on-error={ }; :do {/ip hotspot cookie remove [find user=\$user];} on-error={ }; :do {/file remove \\\"\$validityTextFile\$extfile\\\";} on-error={ };\")];\r\
    \n:set \$validValue [:len \$validity];\r\
    \n:local DailyIncome; :local MonthlyIncome; :local SalesIncome;\r\
    \n:if (\$hsRestAPI=0) do={ :set \$validtill \$validity; :do { \t\r\
    \n:if ( \$validity!=\"0m\" ) do={ /system logging enable 0; :log warning \"CreatingValidityDataTXTFile for \$user \"; /system logging disable 0;\r\
    \n:local sc [/sys scheduler find name=\$user]; :if (\$sc=\"\") do={ :local a [/ip hotspot user get [find name=\$user] limit-uptime]; :local c (\$validity); :local date [ /system clock get date]; /sys sch add name=\"\$user\" comment=\"\$[/system clock get date]-\$[/system clock get time]\" disable=no start-date=\$date interval=\$c on-event=\$hsSchedevent policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon; :delay 2s; } else={ :local sint [/sys scheduler get \$user interval]; :if ( \$validity!=\"\" ) do={ /sys scheduler set \$user interval (\$sint+\$validity); } }; }\r\
    \n:delay 1s; :set \$validUntil [/sys scheduler get \$hsUser next-run]; /file set \"\$validityTextFile\$extfile\" contents=\"\$hsUser#\$validUntil\";:delay 1s;\r\
    \n} on-error={/system logging enable 0; :log error \"ERROR.!!!.CreatingValidityDataTXTFile for \$user\"; /system logging disable 0;} };\r\
    \n:do {/ system logging enable 0; :log warning \"ProcessingVendoSalesMonitoringSection\"; /system logging disable 0;\r\
    \n:local sVendo \$interface;\r\
    \n:local sName [/ip hotspot get [find interface=\$sVendo] name];\r\
    \n:local sMS \"Monthly\";\r\
    \n:local sDS \"Daily\";\r\
    \n:local sAMT \$CoinsAmt;\r\
    \n:local getDamt [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sDS\"] on-event])];\r\
    \n:local getMamt [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sMS\"] on-event])];\r\
    \n:local IncomeDamt [([:tonum \$getDamt]+[:tonum \$sAMT])]; :local IncomeMamt [([:tonum \$getMamt]+[:tonum \$sAMT])];\r\
    \n:do {/tool traffic-monitor set on-event=\"\$IncomeDamt\" [find where interface=\$sVendo && name=\"\$sName_\$sDS\"]} on-error={ };\r\
    \n:do {/tool traffic-monitor set on-event=\"\$IncomeMamt\" [find where interface=\$sVendo && name=\"\$sName_\$sMS\"]} on-error={ };\r\
    \n:if (\$PerVendoTelegram!=0) do={ :set \$telegramTokenId [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sDS\"] comment])];\r\
    \n:set \$telegramChatId [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sMS\"] comment])]; }\r\
    \n:do {:set \$DailyIncome [:put ([/system script get [find name=todayincome] source])]; :set \$DailyIncome [([:tonum \$DailyIncome]+[:tonum \$sAMT])]; /system script set source=[:tostr \$DailyIncome ] [find name=todayincome];\r\
    \n:set \$MonthlyIncome [:put ([/system script get [find name=monthlyincome] source])]; :set \$MonthlyIncome [([:tonum \$MonthlyIncome]+[:tonum \$sAMT])]; /system script set source=[:tostr \$MonthlyIncome] [find name=monthlyincome];\r\
    \n:set \$SalesIncome [:put ([/system script get [find name=lifetimeincome] source])]; :set \$SalesIncome [([:tonum \$SalesIncome]+[:tonum \$sAMT])]; /system script set source=[:tostr \$SalesIncome] [find name=lifetimeincome];\r\
    \n} on-error={/ system logging enable 0; :log error \"ErrorOnVendoSales---ScriptStorageMissing\"; /system logging disable 0;};\r\
    \n:if (\$enableAddSalesReport!=\"0\") do={/system logging enable 0; :log warning \"ProcessingOnMikhmonSaleSection\"; /system logging disable 0; :do { \r\
    \n:local date [ /system clock get date ]; :local year [ :pick \$date 7 11 ];\r\
    \n:local month [ :pick \$date 0 3 ]; :local ucomment \$hsComment;\r\
    \n:local uCoins [:pick \$infoArray 0];\r\
    \n:if (\$validtill=\"0m\" or \$validtill=\"\") do={:set \$validtill \"45d\"} ;\r\
    \n:local iSked [/sys scheduler find name=\$user]; :if (\$iSked=\"\") do={/sys sch add name=\"\$user\" disable=no start-date=\$date interval=\"45d\"; :delay 2s; }  \r\
    \n:local iskedCom [ /sys sch get [ /sys sch find where name=\"\$user\" ] comment]; \r\
    \n:local exp [ /sys sch get [ /sys sch find where name=\"\$user\" ] next-run]; \r\
    \n:local getxp [:put [:len \$exp]]; \r\
    \n    :if (\$getxp = 15) do={:local d [:pic \$exp 0 6]; :local t [:pic \$exp 7 16]; :local s (\"/\"); :local exp (\"\$d\$s\$year \$t\"); /ip hotspot user set comment=\$exp [find where name=\"\$user\"]; }; \r\
    \n    :if (\$getxp = 8) do={ /ip hotspot user set comment=\"\$date \$exp\" [find where name=\"\$user\"];}; \r\
    \n    :if (\$getxp > 15) do={ /ip hotspot user set comment=\$exp [find where name=\"\$user\"];};\r\
    \n        :if (\$iSked=\"\") do={/sys sch remove [find where name=\"\$user\"]; :delay 0.5s; } ;\r\
    \n            :local tmpA \$hsComment; :local tmpB [/ip hotspot user get [find name=\$user] comment] ; \r\
    \n            :set \$ucomment \"\$coderep-\$hsComment\"; \r\
    \n            :local mac \$\"mac-address\"; \r\
    \n            :local time [/system clock get time ];\r\
    \n            :do {/system script add name=\"\$date-|-\$time-|-\$user-|-\$uCoins-|-\$address-|-\$mac-|-\$validtill-|-\$usrProf-|-\$ucomment\" owner=\"\$month\$year\" source=\$date comment=\$user;} on-error={/system logging enable 0; :log error \"ERRORonAddONSalesRoutine\"; /system logging disable 0;};\r\
    \n:set \$cpa 1;} on-error={:set \$cpa 0; /system logging enable 0; :log error \"ERRORonMikhmonSaleSection\"; /system logging disable 0;}; } ;\r\
    \n:set \$cpa 1;} on-error={:set \$cpa 0; / system logging enable 0; :log error \"ErrorOnVendoSalesMonitoringSection\"; /system logging disable 0;};\r\
    \n:if (\$cpa!=0) do={ /do { /system logging enable 0; :log warning \"PreparingTelegramMessageNotification\"; /system logging disable 0;\r\
    \n:local VendoName [:pick \$infoArray 2]; :local MSGdate [/system clock get date]; \r\
    \n:local MSGtime [/system clock get time]; :local hsMac \$\"mac-address\"; :local hsIPx \$address;\r\
    \n:local aSessionTLeft [/ip hotspot active get [find user=\$user] session-time-left];\r\
    \n:local aUptime [/ip hotspot active get [find user=\$user] uptime];\r\
    \n:local teleMSG; :local vendoMSG;\r\
    \n\t:if (\$TelegramSendMsg=1) do={:local myhost; \r\
    \n\t    :do { :set \$myhost [/ip dhcp-server lease get [ find mac-address=\$mac ] host-name];} on-error={:set \$myhost \"NoIDname\"}; :if (\$myhost=\"\") do={:set \$myhost \"NoIDname\"}; \r\
    \n\t\t:for i from=0 to=([:len \$VendoName] - 1) do={  :local char [:pick \$VendoName \$i]; :if (\$char = \" \") do={ :set \$char \"%20\"; }; :set vendoMSG (\$vendoMSG . \$char); };\r\
    \n\t:set \$teleMSG [:put (\"\$LoginInfo %0A VENDO: \$VendoName %0A VOUCHER: \$user %0A VALID UNTIL: \$validUntil %0A LIMIT UPTIME: \$hsLimitUptime %0A UPTIME USED: \$hsUptime %0A Active UPTIME: \$aUptime %0A ActiveSessionTimeLeft: \$aSessionTLeft %0A Device: \$myhost %0A MAC: \$hsMac |  IP: \$hsIPx %0A %0A Amount: \$CoinsAmt %0A Today Sales: \$DailyIncome %0A Monthly Sales: \$MonthlyIncome %0A TransDetails : \$MSGdate | \$MSGtime %0A <<=-=-=-=-=-=-=-=-=-=-=>>\")];\r\
    \n    :do { /tool fetch url=\"https://api.telegram.org/bot\$telegramTokenId/sendmessage\\\?chat_id=\$telegramChatId&text=\$teleMSG\" keep-result=no; } on-error={/system logging enable 0; :log error \"ErrorOnTelegramFetchSection\";} }\r\
    \n} on-error={/system logging enable 0; :log error \"ErrorOn.!!! TelegramMessageNotificationSection\"; } };\r\
    \n};\r\
    \n#:do {/system logging enable 0; :log info \"Lets this crawl to the net \$user Hsprofile: \$hsHSprofile Sharing: \$hsSharedUser htmlDIR: \$hsHTMLdir\"; /system logging disable 0; } on-error={ };\r\
    \n/system logging enable 0; :log warning \"LOGON-EVENT Finished Username: \$user \"; :log info  \"FREE and 100%Tested w/ JuanFi 4.x ONLY \\n Created and Modified by: fjoCharmedOnes \"; / console clear-history; } on-error={/ system logging enable 0; :log error \"ScriptFailed\"; / console clear-history;};\r\
    \n}\r\
    \n###--EOF" on-logout="### Revised by: fjoCharmedones | ONLogoutEvent | Tested Working as of 13Jan23K\r\
    \n### onlogout script \r\
    \n:do {:log info \"==LOGOUT Event Started AccessCode: \$user HS: \$interface  Reason: \$cause\";} on-error={ };\r\
    \n{ :local MacAdd \$\"mac-address\"; :local UptimeSecs \$\"uptime-secs\"; :local BytesTotal \$\"bytes-total\";\r\
    \n/do { :local Limituptime ([/ip hotspot user get \$user limit-uptime]); :local Uptime ([/ip hotspot user get \$user uptime]);\r\
    \n:if (\$Uptime>= \$Limituptime) do={ /system logging enable 0; :log info \"==UPTIME-LIMIT AccessCode: \$user Details: \$cause ==\"; /system logging disable 0;\r\
    \n/do {/ip hotspot user set \$user email=\"timesup@finish.hotspot.local\" disa=yes;} on-error={/system logging enable 0; :log info \"NORecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/ip hotspot user remove \$user;} on-error={/system logging enable 0; :log info \"NORecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/ip hotspot cookie remove [find user=\$user];} on-error={/system logging enable 0; :log info \"NOCookieRecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/system sche remove \$user;} on-error={/system logging enable 0; :log info \"NOSchedRecordFound: \$user\"; /system logging disable 0;}\r\
    \n/system logging enable 0; } else={/system logging enable 0; :log warning \"==UserLogout..AccessCode: \$user *Details:= \$cause  *Uptime:= \$UptimeSecs Secs  *DataUsage:= \$BytesTotal Bytes\"; } ;\r\
    \n} on-error={/system logging enable 0; :log error \"ERRORonLOGOUTeventScript\";}\r\
    \n/system logging enable 0; :log info \"==LOGOUT==EventFinished==: \$user = \$MacAdd = \$address TimeStamp: \$[/system clock get date] \$[/system clock get time]\"; } \r\
    \n/system logging enable 0;\r\
    \n#EOF" shared-users=2 } on-error={ };
} on-error={ };
                :do {:local dateint do={:local montharray ( "jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec" ); :local days [ :pick $d 4 6 ];:local month [ :pick $d 0 3 ];:local year [ :pick $d 7 11 ];
                :local monthint ([ :find $montharray $month]); :local month ($monthint + 1); :if ( [:len $month] = 1) do={:local zero ("0");:return [:tonum ("$year$zero$month$days")];} else={:return [:tonum ("$year$month$days")];}};
                :local timeint do={:local hours [ :pick $t 0 2 ];:local minutes [ :pick $t 3 5 ];:return ($hours * 60 + $minutes) ;};
                :local date [ /system clock get date ]; :local time [ /system clock get time ]; :local today [$dateint d=$date] ; :local curtime [$timeint t=$time] ; :local tyear [ :pick $date 7 11 ]; :local lyear ($tyear-1);
                :local tmpM [ :pick $today 4 6]; :local tmpD [ :pick $today 6 8]; :set $coderep "in-$tmpM-$tmpD"; } on-error={:set $coderep "ZZ-$[/system clock get date] $[/system clock get time]";};
                :do {:global devSN [/system sched get [find name=zONEBootime] comment];} on-error={:do {:global devSN [/system sched get [find name=zONEBootUpdate] comment];} on-error={ };};
                :do {:global devFWtype [/system routerboard get firmware-type]; :global devSerial [/system routerboard get serial-number]; :global devModel [/system routerboard get model]; :global HSemailadd "$devSerial@sn.mynetname.net"; } on-error={ };
 ############################################ 
    }
}
#END AddHSProScript #######
    :if ($ClientType!=0) do={ :do {:local zSysBootEvent [:tostr [(":delay 10s; :log info \"Automated System StartUP\"; :log warning \"== Initializing Device Parameter\
    s....== - \$[/system clock get date] \$[/system clock get time]\"; /system logging disable 0;\r\
    \n{\r\
    \n/interface ethernet \r\
    \n:foreach iface in=[/interface ethernet find] do={ /interface ethernet reset-mac-address \$iface }\r\
    \n:local devPackage; /do {:set \$devPackage [/system package get [/system package find name=routeros] name];} on-error={:set \$devPackage \"\";};\
    \r\
    \n:local cmdShell; :local ntpCMD; :local devSerial [/system routerboard get serial-number]; :local devModel [/system routerboard get model]; :loca\
    l devLic [/system license get software-id];\r\
    \n/interface detect-internet set detect-interface-list=none; /interface detect-internet set lan-interface-list=none; /interface detect-internet se\
    t wan-interface-list=none; /interface detect-internet set internet-interface-list=none;\r\
    \n/tool mac-server set allowed-interface-list=all; /tool mac-server mac-winbox set allowed-interface-list=all; /ip neighbor discovery-settings set\
    \_discover-interface-list=!dynamic; /ip firewall connection tracking set enabled=yes;\r\
    \n/tool romon set enabled=yes; /ip cloud set ddns-enabled=yes ddns-update-interval=1m; /system identity set name=\"$MTname\$devLic\$devSerial\";\r\
    \n:local ntpVI \"/system ntp client set enabled=yes  primary-ntp=202.12.97.45 secondary-ntp=216.239.35.12;\";\r\
    \n:local ntpVII \"/system ntp client set enabled=yes mode=unicast servers=time.windows.com,time.google.com,time.apple.com,asia.pool.ntp.org; /syst\
    em ntp server set enabled=yes manycast=yes multicast=yes;\";\r\
    \n:if (\$devPackage=\"routeros\") do={:set \$cmdShell [:put \"\$ntpVII\"]; :set \$ntpCMD [:parse \":do {\$cmdShell} on-error={ }\"]; } else={:set \
    \$cmdShell [:put \"\$ntpVI\"]; :set \$ntpCMD [:parse \":do {\$cmdShell} on-error={ }\"]; };\r\
    \n:do {\$ntpCMD} on-error={/ system logging enable 0; :log error \"NTPscriptExecutionError\"}; :delay 5s; /console clear-history;\r\
    \n}\r\
    \n/ system logging enable 0; :log error \"== This Configuration is made for \$[/system identity get name] == \"; :log warning \"== BootUP Automati\
    on Process Completed == - \$[/system clock get date] \$[/system clock get time]\"; / console clear-history;\r\
    \n#EOF" )]]; /system scheduler add name=zSysBootCMD disabled=yes start-time=startup on-event="$zSysBootEvent" comment="$softID $[/system clock get date] $[/system clock get time]" } on-error={ };
    } 
    :if ($AddDataQue!=0) do={ :do {/ip firewall mangle
        /ip firewall mangle add action=accept chain=prerouting dst-address-list=IntraNET src-address-list=IntraNET comment="$softID AcceptIntraNetworkConnections"
        /ip firewall mangle add action=accept chain=postrouting dst-address-list=IntraNET src-address-list=IntraNET comment="$softID AcceptIntraNetworkConnections"
        /ip firewall mangle add action=accept chain=forward dst-address-list=IntraNET src-address-list=IntraNET comment="$softID AcceptIntraNetworkConnections"
        /ip firewall mangle add action=accept chain=input dst-address-list=IntraNET src-address-list=IntraNET comment="$softID AcceptIntraNetworkConnections"
        /ip firewall mangle add action=accept chain=output dst-address-list=IntraNET src-address-list=IntraNET comment="$softID AcceptIntraNetworkConnections"       
        /ip firewall mangle add action=mark-connection chain=prerouting comment="$softID Data Traffic Management" connection-mark=!BigDataCapture connection-state=!invalid new-connection-mark=allDataCapture passthrough=yes
        /ip firewall mangle add action=mark-connection chain=forward comment="$softID Data Traffic Management" connection-mark=!BigDataCapture new-connection-mark=allDataCapture passthrough=yes
        /ip firewall mangle add action=mark-connection chain=output comment="$softID Data Traffic Management" connection-mark=!BigDataCapture connection-state=!invalid new-connection-mark=allDataCapture passthrough=yes
        /ip firewall mangle add action=mark-connection chain=forward comment="$softID Data Traffic Management" connection-bytes=500000-0 connection-mark=allDataCapture connection-rate=200k-100M new-connection-mark=BigDataCapture protocol=tcp
        /ip firewall mangle add action=mark-connection chain=forward comment="$softID Data Traffic Management" connection-bytes=500000-0 connection-mark=allDataCapture connection-rate=200k-100M new-connection-mark=BigDataCapture protocol=udp
        /ip firewall mangle add action=mark-packet chain=forward comment="$softID Data Traffic Management" connection-mark=BigDataCapture new-packet-mark=BigBuckets passthrough=no
        /ip firewall mangle add action=mark-packet chain=forward comment="$softID Data Traffic Management" connection-mark=allDataCapture new-packet-mark=NormalPackets passthrough=no
        :do { /queue type add kind=pfifo name=sqm-pfifo-global pfifo-limit=64; /queue type add kind=sfq name=sqm-sfq-global sfq-allot=3072 sfq-perturb=8;
        /queue tree add bucket-size=0.999 name=DLglobaldata parent=global queue=sqm-pfifo-global comment="$softID Data Traffic Management";
        /queue tree add bucket-size=0.5 burst-limit=65M burst-threshold=25M burst-time=12s limit-at=5M max-limit=50M name=DL-BigQ packet-mark=BigBuckets parent=DLglobaldata priority=6 queue=sqm-sfq-global comment="$softID Data Traffic Management"
        /queue tree add bucket-size=0.555 burst-limit=50M burst-threshold=35M burst-time=12s limit-at=5M max-limit=40M name=DL-NormalDataQ packet-mark=NormalPackets parent=DLglobaldata priority=2 queue=sqm-sfq-global comment="$softID Data Traffic Management"
        /queue tree add bucket-size=0.999 name=UPglobaldata parent=global queue=sqm-pfifo-global comment="$softID Data Traffic Management"
        /queue tree add bucket-size=0.5 burst-limit=65M burst-threshold=25M burst-time=12s limit-at=5M max-limit=50M name=UP-BigQ packet-mark=BigBuckets parent=UPglobaldata priority=6 queue=sqm-sfq-global comment="$softID Data Traffic Management"
        /queue tree add bucket-size=0.555 burst-limit=50M burst-threshold=35M burst-time=12s limit-at=5M max-limit=40M name=UP-NormalDataQ packet-mark=NormalPackets parent=UPglobaldata priority=2 queue=sqm-sfq-global comment="$softID Data Traffic Management" } on-error={ };
    } on-error={ }; } 
    :if ($ApplyHSPatch!=0) do={
##zONEBootResetSales##
    :do {/system scheduler set [find name=zONEBootResetSales] on-event="# REQUIRED    : MTrOSver 6.48 & UP | JuanFi 4.x BIN & Portal\r\
    \n# DESCRIPTION : Daily Routine Module for JuanFi Hotspot User Profile Login/Logout script Event \r\
    \n# Created By: fjoCharmedones \r\
    \n# Date Created : 15 June 2023\r\
    \n:log info \"Daily Routine Module for JuanFiSystem =->: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n:do { :do {:local dateint do={:local montharray ( \"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\" ); :local days [ :pick \$d 4 6 ];:local month [ :pick \$d 0 3 ];:local year [ :pick \$d 7 11 ];\r\
    \n:local monthint ([ :find \$montharray \$month]); :local month (\$monthint + 1); :if ( [:len \$month] = 1) do={:local zero (\"0\");:return [:tonum (\"\$year\$zero\$month\$days\")];} else={:return [:tonum (\"\$year\$month\$days\")];}};\r\
    \n:local timeint do={:local hours [ :pick \$t 0 2 ];:local minutes [ :pick \$t 3 5 ];:return (\$hours * 60 + \$minutes) ;};\r\
    \n:local date [ /system clock get date ]; :local time [ /system clock get time ]; :local today [\$dateint d=\$date] ; :local curtime [\$timeint t=\$time] ; :local tyear [ :pick \$date 7 11 ]; :local lyear (\$tyear-1);\r\
    \n:local tmpM [ :pick \$today 4 6]; :local tmpD [ :pick \$today 6 8]; :set \$coderep \"in-\$tmpM-\$tmpD\"; } on-error={:set \$coderep \"ZZ-\$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:do {:global devSN [/system sched get [find name=zONEBootime] comment];} on-error={:do {:global devSN [/system sched get [find name=zONEBootResetSales] comment];} on-error={ };};\r\
    \n:do {:global devFWtype [/system routerboard get firmware-type]; :global devSerial [/system routerboard get serial-number]; :global devModel [/system routerboard get model]; :global HSemailadd \"\$devSerial@sn.mynetname.net\"; } on-error={ }; } on-error={ };\r\
    \n{:log info \"Reset Daily Sales  started: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n:do {/system logging disable 0; /system script set source=\"0\" [/system script find name=todayincome]; :foreach xItem in=[/tool traffic-monitor find where disabled and trigger=below and traffic=received] do={:do {/tool traffic-monitor set \$xItem on-event=\"0\";} on-error={ }}; /system logging enable 0;} on-error={/system logging enable 0; :log error \"ERROR on Daily Sales Routine  timelog: \$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:log info \"Reset Daily Sales  Done: \$[/system clock get date] \$[/system clock get time]\";    \r\
    \nif ([/system clock get date]~\"/01/\") do={:log info \"Monthly Daily Sales  started: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n:do {/system logging disable 0; /system script set source=\"0\" [/system script find name=monthlyincome]; :foreach xItem in=[/tool traffic-monitor find where disabled and trigger=above and traffic=transmitted] do={:do {/tool traffic-monitor set \$xItem on-event=\"0\";} on-error={ }}; /system logging enable 0;} on-error={/system logging enable 0; :log error \"ERROR on Monthly Sales Routine  timelog: \$[/system clock get date] \$[/system clock get time]\";};\r\
    \n:log info \"Monthly Daily Sales  Done: \$[/system clock get date] \$[/system clock get time]\";\r\
    \n} }\r\
    \n#EOF" start-date=dec/31/2020 start-time=00:00:01 } on-error={ };
##zONEBootResetSales##

        :do {/ip hotspot user profile remove [find name=hsPatchProfile];} on-error={ };
        :do {/ip hotspot user profile add copy-from="$1FiProfile" name=hsPatchProfile;} on-error={ };
        :do { /ip hotspot user profile set [ find default=yes ] insert-queue-before=first on-login=":put (\",ntfc,10,31d,12,,Disable,\")\r\
    \n# REQUIRED    : MTrOSver 6.48 upto 7.8rc3 | JuanFi 4.x BIN & Portal\r\
    \n#             : RouterOS 7.9 changes & updated timezone information from \"tzdata2023c\" release;\r\
    \n# DESCRIPTION : JuanFi Hotspot User Profile Login/Logout script Event \r\
    \n#               Sales Monitoring using Mikhmon | Individual Vendo Sales & Telegram Info\r\
    \n# Created By: fjoCharmedones \r\
    \n# Date Created : 15 June 2023 Last Modified: 30 Sept2K3\r\
    \n###--->>BOF\r\
    \n:if (\$devSN=\$devSerial) do={ /system logging disable 0; / console clear-history;\r\
    \n### Replace telegram token id | chat id / group id\r\
    \n:local telegramTokenId \"2021159313:AAHEBoOLogYjLCpSwVeKPVmKKO4TIxa02vQ\";\r\
    \n:local telegramChatId \"-928606285\";\r\
    \n##\r\
    \n# declared VARIABLES = 0 or 1, change to 0=DISABLE 1=ENABLE\r\
    \n##\r\
    \n# Send Telegram Message\r\
    \n:local TelegramSendMsg 1;\r\
    \n# Telegram Message Per Vendo w/ Separates telegram token id | chat id / group id [w/ special instruction]\r\
    \n:local PerVendoTelegram 1;\r\
    \n# Add Sales Monitoring using Mikhmon Server\r\
    \n:local enableAddSalesReport 1;\r\
    \n:local createMikhmonSaleReport 0;\r\
    \n# for ROSv7.x Does you Portal support REST-API \? ROS v6.x AUTO-DISABLE\r\
    \n:local hsRestAPI 0;\r\
    \n# folder name for validity TEXTFILE [NOTE: AUTO-DETECT FOLDER LOCATION no NEED to specify]\r\
    \n:local hsDataName \"/data/\";\r\
    \n##### Working Variables DONT EDIT BEYOND THIS LINE#\r\
    \n:local validityTextFolder; :local validityTextFile; :local vcMacAdd; :local CoinsAmt; :local hsSchedevent;\r\
    \n:local infoArray; :local LoginInfo; :local validUntil; :local validity; :local validtill; :local validValue; :local validLimitUptime;\r\
    \n:local cpa 0; :local comDetails \"fjo\"; :local extfile \".txt\"; :local hsMacAdd \$\"mac-address\"; :local hsIfaceName \$interface; :local hsUser \$user;\r\
    \n:local sobre [/ip hotspot user get \$user email]; :local hsLimitUptime [/ip hotspot user get \$user limit-uptime]; \r\
    \n:local hsUptime [/ip hotspot user get \$user uptime]; :local hsComment [/ip hotspot user get \$user comment];\r\
    \n:local hsProfile [/ip hotspot user get \$user profile]; :local hsHSprofile [/ip hotspot get [/ip hotspot find interface=\$hsIfaceName] profile];\r\
    \n:local hsSharedUser [/ip hotspot user profile get [/ip hotspot user profile find name=\$hsProfile] shared-users];\r\
    \n:local hsHTMLdir [/ip hotspot profile get [ /ip hotspot profile find name=\$hsHSprofile] html-directory];\r\
    \n:set \$validityTextFolder \"\$hsHTMLdir\$hsDataName\";\r\
    \n:set \$infoArray [:toarray [:pick \$hsComment ([:find \$hsComment \",\"]+1) [:len \$hsComment]]];\r\
    \n:set \$CoinsAmt [:pick \$infoArray 0]; :set \$validity [:pick \$hsComment 0 [:find \$hsComment \",\"]]; :set \$validLimitUptime [:len [/ip hotspot user get \$user limit-uptime]];\r\
    \n:if (\$sobre=\"new@gmail.com\" or \$sobre=\"extend@gmail.com\" or \$sobre=\"bots@juanfi.local\") do={/ip hotspot user set email=\"\$HSemailadd\" comment=\"\" \$user;}\r\
    \n:if (\$devPackage!=\"routeros\") do={:set \$hsRestAPI 0;}\r\
    \n:do {/system logging enable 0; :log info \"Checking ON-Login event profile \\n\\r Hotspot: \$interface \\n\\r Username: \$user \"; /system logging disable 0; \r\
    \n:if (\$hsRestAPI=0) do={/system logging enable 0; :log warning \"WorkingOnValidityTextFile\"; /system logging disable 0;\r\
    \n:for i from=0 to=([:len \$hsMacAdd] - 1) do={ :local char [:pick \$hsMacAdd \$i]; :if (\$char = \":\") do={ :set \$char \"\"; } ; :set vcMacAdd (\$vcMacAdd . \$char); } ;\r\
    \n:set \$validityTextFile \"\$validityTextFolder\$vcMacAdd\";\r\
    \n/file print file=\$validityTextFile where name=\"NoName.TXT\"; \r\
    \n:delay 3s;\r\
    \n:do {/file set \"\$validityTextFile\$extfile\" contents=\" \";} on-error={/file set [find name=\$validityTextFile\$extfile] contents=\" \";}; :delay 1.5s;\r\
    \n:do {/file set [find name=\$validityTextFile\$extfile] contents=\" \";} on-error={:do {/file set \"\$validityTextFile\$extfile\" contents=\" \";} on-error={ };}; :delay 1.5s;\r\
    \nif (\"\$sobre\"=\"\$HSemailadd\" or \"\$sobre\"=\"bots@juanfi.local\") do={ /system logging enable 0; :log warning \"ProcessUser re-login routine \\n\\r HotspotInterface: \$interface \\n\\r Username: \$user\"; /system logging disable 0; \r\
    \n:do {:set \$validUntil [/sys scheduler get \$hsUser next-run]; /file set \"\$validityTextFile\$extfile\" contents=\"\$hsUser#\$validUntil\";} on-error={ }; :delay 1.5s;}\r\
    \n:delay 0.5s; } ;\r\
    \n:if (\$hsSharedUser>=2) do={/system logging enable 0; :log warning \"Check-Remove-MultipleActiveUserLogins\"; /system logging disable 0; :local cSUmac \$\"mac-address\";\r\
    \n\t:foreach m in=[/ip hotspot active find user=\"\$username\"] do={ :local aSUmac [/ip hotspot active get \$m mac-address]; :if (\$cSUmac!=\$aSUmac) do={  /ip hotspot active remove [/ip hotspot active find mac-address=\"\$aSUmac\"]; } } };\r\
    \n:if (\$sobre=\"new@gmail.com\" or \$sobre=\"extend@gmail.com\") do={ :if (\$sobre=\"new@gmail.com\") do={:set \$LoginInfo \"<<======New User======>>\"}; :if (\$sobre=\"extend@gmail.com\") do={:set \$LoginInfo \"<<======User ExtendTime======>>\"};\r\
    \n/system logging enable 0; :log warning \"Processing \$LoginInfo User Login Info \\nHotspotServer: \$interface Username:<< \$user >>  Amount:--=>  \$CoinsAmt <=--\"; /system logging disable 0;\r\
    \n:set \$hsSchedevent [:put (\":do {/system sche remove [find name=\$user];} on-error={ }; :do {/ip hotspot user remove [find name=\$user];} on-error={ }; :do {/ip hotspot active remove [find user=\$user];} on-error={ }; :do {/ip hotspot cookie remove [find user=\$user];} on-error={ }; :do {/file remove \\\"\$validityTextFile\$extfile\\\";} on-error={ };\")];\r\
    \n:set \$validValue [:len \$validity];\r\
    \n:local DailyIncome; :local MonthlyIncome; :local SalesIncome;\r\
    \n:if (\$hsRestAPI=0) do={ :set \$validtill \$validity; :do { \t\r\
    \n:if ( \$validity!=\"0m\" ) do={ /system logging enable 0; :log warning \"CreatingValidityDataTXTFile for \$user \"; /system logging disable 0;\r\
    \n:local sc [/sys scheduler find name=\$user]; :if (\$sc=\"\") do={ :local a [/ip hotspot user get [find name=\$user] limit-uptime]; :local c (\$validity); :local date [ /system clock get date]; /sys sch add name=\"\$user\" comment=\"\$[/system clock get date]-\$[/system clock get time]\" disable=no start-date=\$date interval=\$c on-event=\$hsSchedevent policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon; :delay 2s; } else={ :local sint [/sys scheduler get \$user interval]; :if ( \$validity!=\"\" ) do={ /sys scheduler set \$user interval (\$sint+\$validity); } }; }\r\
    \n:delay 1s; :set \$validUntil [/sys scheduler get \$hsUser next-run]; /file set \"\$validityTextFile\$extfile\" contents=\"\$hsUser#\$validUntil\";:delay 1s;\r\
    \n} on-error={/system logging enable 0; :log error \"ERROR.!!!.CreatingValidityDataTXTFile for \$user\"; /system logging disable 0;} };\r\
    \n:do {/ system logging enable 0; :log warning \"ProcessingVendoSalesMonitoringSection\"; /system logging disable 0;\r\
    \n:local sVendo \$interface;\r\
    \n:local sName [/ip hotspot get [find interface=\$sVendo] name];\r\
    \n:local sMS \"Monthly\";\r\
    \n:local sDS \"Daily\";\r\
    \n:local sAMT \$CoinsAmt;\r\
    \n:local getDamt [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sDS\"] on-event])];\r\
    \n:local getMamt [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sMS\"] on-event])];\r\
    \n:local IncomeDamt [([:tonum \$getDamt]+[:tonum \$sAMT])]; :local IncomeMamt [([:tonum \$getMamt]+[:tonum \$sAMT])];\r\
    \n:do {/tool traffic-monitor set on-event=\"\$IncomeDamt\" [find where interface=\$sVendo && name=\"\$sName_\$sDS\"]} on-error={ };\r\
    \n:do {/tool traffic-monitor set on-event=\"\$IncomeMamt\" [find where interface=\$sVendo && name=\"\$sName_\$sMS\"]} on-error={ };\r\
    \n:if (\$PerVendoTelegram!=0) do={ :set \$telegramTokenId [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sDS\"] comment])];\r\
    \n:set \$telegramChatId [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sMS\"] comment])]; }\r\
    \n:do {:set \$DailyIncome [:put ([/system script get [find name=todayincome] source])]; :set \$DailyIncome [([:tonum \$DailyIncome]+[:tonum \$sAMT])]; /system script set source=[:tostr \$DailyIncome ] [find name=todayincome];\r\
    \n:set \$MonthlyIncome [:put ([/system script get [find name=monthlyincome] source])]; :set \$MonthlyIncome [([:tonum \$MonthlyIncome]+[:tonum \$sAMT])]; /system script set source=[:tostr \$MonthlyIncome] [find name=monthlyincome];\r\
    \n:set \$SalesIncome [:put ([/system script get [find name=lifetimeincome] source])]; :set \$SalesIncome [([:tonum \$SalesIncome]+[:tonum \$sAMT])]; /system script set source=[:tostr \$SalesIncome] [find name=lifetimeincome];\r\
    \n} on-error={/ system logging enable 0; :log error \"ErrorOnVendoSales---ScriptStorageMissing\"; /system logging disable 0;};\r\
    \n:if (\$enableAddSalesReport!=\"0\") do={/system logging enable 0; :log warning \"ProcessingOnMikhmonSaleSection\"; /system logging disable 0; :do { \r\
    \n:local date [ /system clock get date ]; :local year [ :pick \$date 7 11 ];\r\
    \n:local month [ :pick \$date 0 3 ]; :local ucomment \$hsComment;\r\
    \n:local uCoins [:pick \$infoArray 0];\r\
    \n:if (\$validtill=\"0m\" or \$validtill=\"\") do={:set \$validtill \"45d\"} ;\r\
    \n:local iSked [/sys scheduler find name=\$user]; :if (\$iSked=\"\") do={/sys sch add name=\"\$user\" disable=no start-date=\$date interval=\"45d\"; :delay 2s; }  \r\
    \n:local iskedCom [ /sys sch get [ /sys sch find where name=\"\$user\" ] comment]; \r\
    \n:local exp [ /sys sch get [ /sys sch find where name=\"\$user\" ] next-run]; \r\
    \n:local getxp [:put [:len \$exp]]; \r\
    \n    :if (\$getxp = 15) do={:local d [:pic \$exp 0 6]; :local t [:pic \$exp 7 16]; :local s (\"/\"); :local exp (\"\$d\$s\$year \$t\"); /ip hotspot user set comment=\$exp [find where name=\"\$user\"]; }; \r\
    \n    :if (\$getxp = 8) do={ /ip hotspot user set comment=\"\$date \$exp\" [find where name=\"\$user\"];}; \r\
    \n    :if (\$getxp > 15) do={ /ip hotspot user set comment=\$exp [find where name=\"\$user\"];};\r\
    \n        :if (\$iSked=\"\") do={/sys sch remove [find where name=\"\$user\"]; :delay 0.5s; } ;\r\
    \n            :local tmpA \$hsComment; :local tmpB [/ip hotspot user get [find name=\$user] comment] ; \r\
    \n            :set \$ucomment \"\$coderep-\$hsComment\"; \r\
    \n            :local mac \$\"mac-address\"; \r\
    \n            :local time [/system clock get time ];\r\
    \n            :if (\$createMikhmonSaleReport!=\"0\") do={ :do {/system script add name=\"\$date-|-\$time-|-\$user-|-\$uCoins-|-\$address-|-\$mac-|-\$validtill-|-\$usrProf-|-\$ucomment\" owner=\"\$month\$year\" source=\$date comment=\$user;} on-error={/system logging enable 0; :log error \"ERRORonAddONSalesRoutine\"; /system logging disable 0; }; };\r\
    \n:set \$cpa 1;} on-error={:set \$cpa 0; /system logging enable 0; :log error \"ERRORonMikhmonSaleSection\"; /system logging disable 0;}; } ;\r\
    \n:set \$cpa 1;} on-error={:set \$cpa 0; / system logging enable 0; :log error \"ErrorOnVendoSalesMonitoringSection\"; /system logging disable 0;};\r\
    \n###TelegramArea\r\
    \n:if (\$cpa!=0) do={/system logging enable 0; :log warning \"PreparingTelegramMessageNotification\"; /system logging disable 0; :do { \r\
    \n\t:if (\$enableTelegram=1) do={:local myhost; :local checkHostName [:put [:len [/ip dhcp-server lease get [ find mac-address=\$mac ] host-name]]];\t     \r\
    \n\t    :do {:set \$myhost [/ip dhcp-server lease get [ find mac-address=\$mac ] host-name];} on-error={:set \$myhost \"UNKnownHost\";}\r\
    \n        :if (\$checkHostName=0) do={:set \$myhost \"UNKnownHost\"};\t\t \r\
    \n\t\t:local vendoNew;\r\
    \n\t\t:for i from=0 to=([:len \$vendo] - 1) do={ \r\
    \n\t\t  :local char [:pick \$vendo \$i]\r\
    \n\t\t  :if (\$char = \" \") do={\r\
    \n\t\t\t:set \$char \"%20\"\r\
    \n\t\t  }\r\
    \n\t\t  :set vendoNew (\$vendoNew . \$char)\r\
    \n\t\t}\r\
    \n        :local MSGdate [/system clock get date]; :local MSGtime [/system clock get time]; \r\
    \n        :local getIncome; :local getMonthlyIncome; :local getLifetimeIncome;\r\
    \n        :local sVendo \$interface; :local sName [/ip hotspot get [find interface=\$sVendo] name];\r\
    \n        :local sMS \"Monthly\"; :local sDS \"Daily\";\r\
    \n        :set \$getLifetimeIncome [:put ([/system script get [find name=lifetimeincome] source])];\r\
    \n        :if (\$PerVendoTelegram=0) do={:set \$getIncome [:put ([/system script get [find name=todayincome] source])]; :set \$getMonthlyIncome [:put ([/system script get [find name=monthlyincome] source])]; } else={ :set \$getIncome [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sDS\"] on-event])]; :set \$getMonthlyIncome  [:put ([/tool traffic-monitor get [find where interface=\$sVendo && name=\"\$sName_\$sMS\"] on-event])]; }\r\
    \n            /system logging enable 0; :log warning \"SendingTelegramInfoMessage\"; /system logging disable 0;\r\
    \n        :local SendInfoMsg (\"\$LoginInfo %0A\".\\\r\
    \n                            \"COINSLOT: \$vendoNew %0A\".\\\r\
    \n                            \"USERCODE: \$user %0A\".\\\r\
    \n                            \"DEVICE: \$myhost %0A\".\\\r\
    \n                            \"DEV-IP: \$address %0A\".\\\r\
    \n                            \"DEV-MAC: \$mac %0A\".\\\r\
    \n                            \"VALIDITY: \$validUntil %0A\".\\\r\
    \n                            \"UPTIME USED: \$hsUptime %0A\".\\\r\
    \n                            \"LIMIT UPTIME: \$hsLimitUptime %0A %0A\".\\\r\
    \n                            \"Amount: \$CoinsAmt %0A\".\\                     \r\
    \n                            \"Today Sales: \$getIncome %0A\".\\\r\
    \n                            \"Monthly Sales: \$getMonthlyIncome %0A\".\\\r\
    \n                            \"Total Income: \$getLifetimeIncome %0A %0A\".\\\r\
    \n                            \"TransDetails : \$MSGdate | \$MSGtime %0A\".\\\r\
    \n                            \"<<=-=-=-=-=-=-=-=-=-=-=>>\");\r\
    \n         :delay 0.5s;                    \r\
    \n             :do {/tool fetch url=\"https://api.telegram.org/bot\$telegramTokenId/sendmessage\\\?chat_id=\$telegramChatId&text=\$SendInfoMsg\" keep-result=no;} on-error={/system logging enable 0; :log error \"ErrorOnTelegramFetchSection\";} \r\
    \n    }\r\
    \n} on-error={/system logging enable 0; :log error \"ErrorMainTelegramSection\"; /system logging disable 0;};\r\
    \n};\r\
    \n###TelegramArea\r\
    \n};\r\
    \n#:do {/system logging enable 0; :log info \"Lets this crawl to the net \$user Hsprofile: \$hsHSprofile Sharing: \$hsSharedUser htmlDIR: \$hsHTMLdir\"; /system logging disable 0; } on-error={ };\r\
    \n/system logging enable 0; :log warning \"LOGON-EVENT Finished Username: \$user \"; :log info  \"100%Tested w/ JuanFi 4.x using RouterOS 6.47.10 upto v7.8rc3\"; / console clear-history; } on-error={/ system logging enable 0; :log error \"ScriptFailed\"; / console clear-history;};\r\
    \n}\r\
    \n###--EOF" on-logout="### Revised by: fjoCharmedones | ONLogoutEvent | Tested Working as of 13Jan23K\r\
    \n### onlogout script \r\
    \n:do {:log info \"==LOGOUT Event Started AccessCode: \$user HS: \$interface  Reason: \$cause\";} on-error={ };\r\
    \n{ :local MacAdd \$\"mac-address\"; :local UptimeSecs \$\"uptime-secs\"; :local BytesTotal \$\"bytes-total\";\r\
    \n/do { :local Limituptime ([/ip hotspot user get \$user limit-uptime]); :local Uptime ([/ip hotspot user get \$user uptime]);\r\
    \n:if (\$Uptime>= \$Limituptime) do={ /system logging enable 0; :log info \"==UPTIME-LIMIT AccessCode: \$user Details: \$cause ==\"; /system logging disable 0;\r\
    \n/do {/ip hotspot user set \$user email=\"timesup@finish.hotspot.local\" disa=yes;} on-error={/system logging enable 0; :log info \"NORecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/ip hotspot user remove \$user;} on-error={/system logging enable 0; :log info \"NORecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/ip hotspot cookie remove [find user=\$user];} on-error={/system logging enable 0; :log info \"NOCookieRecordFound: \$user\"; /system logging disable 0;}\r\
    \n/do {/system sche remove \$user;} on-error={/system logging enable 0; :log info \"NOSchedRecordFound: \$user\"; /system logging disable 0;}\r\
    \n/system logging enable 0; } else={/system logging enable 0; :log warning \"==UserLogout..AccessCode: \$user *Details:= \$cause  *Uptime:= \$UptimeSecs Secs  *DataUsage:= \$BytesTotal Bytes\"; } ;\r\
    \n} on-error={/system logging enable 0; :log error \"ERRORonLOGOUTeventScript\";}\r\
    \n/system logging enable 0; :log info \"==LOGOUT==EventFinished==: \$user = \$MacAdd = \$address TimeStamp: \$[/system clock get date] \$[/system clock get time]\"; } \r\
    \n/system logging enable 0;\r\
    \n#EOF" parent-queue=none queue-type=QHSqos rate-limit="3072K/2048K 4096K/2560K 2250K/1535K 11/16 8 1500K/1024K" shared-users=2 } on-error={ };   
    }      
:local echodns 0;
:if ($ClientType!=0) do={/system identity set name="$softID_xHSv_$devSerial"; :delay 0.5s; :put "Checking Internet Service"; :set $echodns [/ping 8.8.8.8 count=5 interval=2];} 
:if ($echodns=0) do={:delay 2s; :put "Configuring Internet Connection"; :if ([/interface ethernet get [/interface ethernet find default-name=$ispx] running]) do={:do {/ip dhcp-client add disabled=no interface="$[/interface ethernet get [/interface ethernet find default-name=$ispx] name]" comment="$softID $devSerial AutomatedScriptGeneration"; :delay 3s; /ip cloud set ddns-enabled=yes ddns-update-interval=1m;} on-error={}}}
:delay 0.5s; /ip cloud set ddns-enabled=yes ddns-update-interval=1m; :delay 5s; :local devComment [:put "\r\n System Information: \r\n Date: $[/system clock get date] \r\n Time: $[/system clock get time] \r\n Board: $[/system resource get board-name] \r\n Architecture: $[/system resource get architecture-name] \r\n Firmware: $[/system resource get version] \r\n \r\n FINISHED....! \r\n";]
:do {/ip dhcp-server alert set [/ip dhcp-server alert find interface="$softID$dummy"] disabled=yes on-alert="This Configuration is for \r\n OwnerInfo: $ownername \r\n Date: $[/system clock get date] \r\n Time: $[/system clock get time] \r\n $devComment \r\n by:fjo" comment="$devComment";} on-error={ };
:do {/user group set [find name=full] comment="$devComment";} on-error={}; :do {/user group set [find name=read] comment="DefGrp by:fjo $softID"; } on-error={}; :do {/user group set [find name=write] comment="$devSerial DefGrp by:fjo"; } on-error={};
/ip cloud set ddns-enabled=yes ddns-update-interval=1m; /system clock set time-zone-name=Asia/Manila; /system identity set name="$[/system license get software-id]$[/system routerboard get serial-number]"; /system logging enable 0; / console clear-history;
#EOF Main 
} on-error={ };
#EOL

